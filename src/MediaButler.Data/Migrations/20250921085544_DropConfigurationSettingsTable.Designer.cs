// <auto-generated />
using System;
using MediaButler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaButler.Data.Migrations
{
    [DbContext(typeof(MediaButlerDbContext))]
    [Migration("20250921085544_DropConfigurationSettingsTable")]
    partial class DropConfigurationSettingsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("MediaButler.Core.Entities.ProcessingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id")
                        .HasComment("Unique identifier for this log entry");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Category")
                        .HasComment("Functional category that generated this log entry");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedDate")
                        .HasComment("UTC timestamp when the entity was created");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("Details")
                        .HasComment("Additional detailed information about the logged event");

                    b.Property<long?>("DurationMs")
                        .HasColumnType("bigint")
                        .HasColumnName("DurationMs")
                        .HasComment("Operation duration in milliseconds for performance monitoring");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("Exception")
                        .HasComment("Exception information including stack trace for debugging");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("FileHash")
                        .HasComment("SHA256 hash of the associated file");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Indicates if the entity is active (not soft-deleted)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasComment("UTC timestamp when the entity was last modified");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("Level")
                        .HasComment("Severity level of this log entry");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Message")
                        .HasComment("Primary log message describing the event");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note")
                        .HasComment("Optional contextual notes about the entity");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProcessingLog_CreatedDate");

                    b.HasIndex("FileHash")
                        .HasDatabaseName("IX_ProcessingLogs_FileHash");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_ProcessingLog_IsActive");

                    b.HasIndex("LastUpdateDate")
                        .HasDatabaseName("IX_ProcessingLog_LastUpdateDate");

                    b.HasIndex("Exception", "CreatedDate")
                        .HasDatabaseName("IX_ProcessingLogs_Exception_Tracking")
                        .HasFilter("[Exception] IS NOT NULL AND [IsActive] = 1");

                    b.HasIndex("IsActive", "LastUpdateDate")
                        .HasDatabaseName("IX_ProcessingLog_IsActive_LastUpdateDate");

                    b.HasIndex("Category", "CreatedDate", "IsActive")
                        .HasDatabaseName("IX_ProcessingLogs_Category_Timeline")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Category", "DurationMs", "CreatedDate")
                        .HasDatabaseName("IX_ProcessingLogs_Performance_Analysis")
                        .HasFilter("[DurationMs] IS NOT NULL AND [IsActive] = 1");

                    b.HasIndex("CreatedDate", "Level", "Category")
                        .IsDescending(true, false, false)
                        .HasDatabaseName("IX_ProcessingLogs_Recent_Activity")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("FileHash", "CreatedDate", "Level")
                        .HasDatabaseName("IX_ProcessingLogs_File_Audit_Trail")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Level", "CreatedDate", "IsActive")
                        .HasDatabaseName("IX_ProcessingLogs_Error_Monitoring")
                        .HasFilter("[Level] >= 4 AND [IsActive] = 1");

                    b.HasIndex("Level", "Category", "FileHash", "CreatedDate")
                        .HasDatabaseName("IX_ProcessingLogs_Comprehensive_Analysis")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("ProcessingLogs", (string)null);
                });

            modelBuilder.Entity("MediaButler.Core.Entities.TrackedFile", b =>
                {
                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Hash")
                        .HasComment("SHA256 hash of the file content, serves as unique identifier");

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Category")
                        .HasComment("Final category confirmed by user or system");

                    b.Property<DateTime?>("ClassifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("ClassifiedAt")
                        .HasComment("UTC timestamp when ML classification was completed");

                    b.Property<decimal>("Confidence")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0.0m)
                        .HasColumnName("Confidence")
                        .HasComment("ML classification confidence score (0.0 to 1.0)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedDate")
                        .HasComment("UTC timestamp when the entity was created");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("FileName")
                        .HasComment("Original filename including extension");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("FileSize")
                        .HasComment("File size in bytes");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Indicates if the entity is active (not soft-deleted)");

                    b.Property<string>("LastError")
                        .HasColumnType("text")
                        .HasColumnName("LastError")
                        .HasComment("Most recent error message encountered during processing");

                    b.Property<DateTime?>("LastErrorAt")
                        .HasColumnType("datetime")
                        .HasColumnName("LastErrorAt")
                        .HasComment("UTC timestamp of the most recent error");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasComment("UTC timestamp when the entity was last modified");

                    b.Property<DateTime?>("MovedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("MovedAt")
                        .HasComment("UTC timestamp when file was successfully moved");

                    b.Property<string>("MovedToPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note")
                        .HasComment("Optional contextual notes about the entity");

                    b.Property<string>("OriginalPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("OriginalPath")
                        .HasComment("Full path where the file was originally discovered");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("RetryCount")
                        .HasComment("Number of processing retry attempts made");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("Status")
                        .HasComment("Current processing status of the file");

                    b.Property<string>("SuggestedCategory")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SuggestedCategory")
                        .HasComment("Category suggested by ML classification");

                    b.Property<string>("TargetPath")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("TargetPath")
                        .HasComment("Target path for file organization");

                    b.HasKey("Hash");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_TrackedFile_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_TrackedFile_IsActive");

                    b.HasIndex("LastUpdateDate")
                        .HasDatabaseName("IX_TrackedFile_LastUpdateDate");

                    b.HasIndex("OriginalPath")
                        .HasDatabaseName("IX_TrackedFiles_OriginalPath");

                    b.HasIndex("IsActive", "LastUpdateDate")
                        .HasDatabaseName("IX_TrackedFile_IsActive_LastUpdateDate");

                    b.HasIndex("Status", "IsActive")
                        .HasDatabaseName("IX_TrackedFiles_Status_IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Category", "Status", "MovedAt")
                        .HasDatabaseName("IX_TrackedFiles_Category_Stats")
                        .HasFilter("[Category] IS NOT NULL");

                    b.HasIndex("FileName", "Category", "Confidence")
                        .HasDatabaseName("IX_TrackedFiles_Filename_Analysis")
                        .HasFilter("[Category] IS NOT NULL AND [Confidence] > 0");

                    b.HasIndex("FileSize", "Status", "CreatedDate")
                        .HasDatabaseName("IX_TrackedFiles_Performance_Analytics");

                    b.HasIndex("Status", "Category", "MovedAt")
                        .HasDatabaseName("IX_TrackedFiles_Organization_Workflow")
                        .HasFilter("[Status] IN (3, 4, 5)");

                    b.HasIndex("Status", "Confidence", "ClassifiedAt")
                        .HasDatabaseName("IX_TrackedFiles_Classification_Workflow")
                        .HasFilter("[Status] = 2");

                    b.HasIndex("Status", "RetryCount", "LastErrorAt")
                        .HasDatabaseName("IX_TrackedFiles_Error_Monitoring")
                        .HasFilter("[Status] IN (6, 7)");

                    b.ToTable("TrackedFiles", (string)null);
                });

            modelBuilder.Entity("MediaButler.Core.Entities.UserPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id")
                        .HasComment("Unique identifier for this user preference");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Category")
                        .HasComment("Category for organizing related preferences (e.g., 'UI', 'Notifications')");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedDate")
                        .HasComment("UTC timestamp when the entity was created");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Indicates if the entity is active (not soft-deleted)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Key")
                        .HasComment("Unique preference key identifier (e.g., 'theme', 'defaultView')");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdateDate")
                        .HasComment("UTC timestamp when the entity was last modified");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note")
                        .HasComment("Optional contextual notes about the entity");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("default")
                        .HasColumnName("UserId")
                        .HasComment("User identifier this preference belongs to (defaults to 'default' for single-user)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Preference value serialized as JSON for consistent storage");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_UserPreference_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserPreference_IsActive");

                    b.HasIndex("LastUpdateDate")
                        .HasDatabaseName("IX_UserPreference_LastUpdateDate");

                    b.HasIndex("IsActive", "LastUpdateDate")
                        .HasDatabaseName("IX_UserPreference_IsActive_LastUpdateDate");

                    b.HasIndex("UserId", "Key")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPreferences_User_Key_Unique")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Category", "UserId", "IsActive")
                        .HasDatabaseName("IX_UserPreferences_Category_User")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("Key", "Category", "IsActive")
                        .HasDatabaseName("IX_UserPreferences_Key_Category")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("LastUpdateDate", "UserId", "Category")
                        .IsDescending(true, false, false)
                        .HasDatabaseName("IX_UserPreferences_Recent_Changes")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("UserId", "IsActive", "LastUpdateDate")
                        .IsDescending(false, false, true)
                        .HasDatabaseName("IX_UserPreferences_User_Active_Updated")
                        .HasFilter("[IsActive] = 1");

                    b.ToTable("UserPreferences", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserPreferences_Category_Format", "[Category] NOT LIKE '%[^A-Za-z0-9_]%'");

                            t.HasCheckConstraint("CK_UserPreferences_Key_Format", "[Key] NOT LIKE '' AND [Key] NOT LIKE '% %'");

                            t.HasCheckConstraint("CK_UserPreferences_UserId_Format", "[UserId] NOT LIKE '%[^A-Za-z0-9_-]%'");

                            t.HasCheckConstraint("CK_UserPreferences_Value_Length", "LENGTH([Value]) <= 10000");
                        });
                });

            modelBuilder.Entity("MediaButler.Core.Entities.ProcessingLog", b =>
                {
                    b.HasOne("MediaButler.Core.Entities.TrackedFile", null)
                        .WithMany()
                        .HasForeignKey("FileHash")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProcessingLogs_TrackedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
