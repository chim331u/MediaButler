@page "/pending"
@inject IFileManagementService FileService

<PageTitle>Pending Review - MediaButler</PageTitle>

<div class="pending-page">
    <div class="page-header">
        <h2>Pending Review</h2>
        <div class="header-actions">
            <button class="btn btn-secondary" @onclick="RefreshFiles" disabled="@isLoading">
                ðŸ”„ Refresh
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <div class="loading-text">Loading pending files...</div>
        </div>
    }
    else if (pendingFiles?.Any() == true)
    {
        <div class="card">
            <div class="card-header">
                Files Awaiting Review (@pendingFiles.Count())
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" @onchange="ToggleSelectAll" />
                            </th>
                            <th>File Name</th>
                            <th>Suggested Category</th>
                            <th>Confidence</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var file in pendingFiles)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" 
                                           @bind="selectedFiles[file.Hash]" 
                                           @bind:event="onchange" />
                                </td>
                                <td>@file.FileName</td>
                                <td>@(file.SuggestedCategory ?? "Unknown")</td>
                                <td>
                                    @if (file.Confidence > 0)
                                    {
                                        <span class="confidence-badge confidence-@GetConfidenceLevel(file.Confidence)">
                                            @($"{file.Confidence:P0}")
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">N/A</span>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-primary btn-sm" 
                                                @onclick="() => ConfirmFile(file)">
                                            âœ“ Confirm
                                        </button>
                                        <button class="btn btn-secondary btn-sm" 
                                                @onclick="() => RejectFile(file)">
                                            âœ— Reject
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                
                @if (selectedFiles.Any(kvp => kvp.Value))
                {
                    <div class="batch-actions">
                        <h4>Batch Actions</h4>
                        <div class="batch-controls">
                            <input @bind="batchCategory" placeholder="Category for selected files" class="form-input" />
                            <button class="btn btn-primary" @onclick="ConfirmSelectedFiles" disabled="@string.IsNullOrWhiteSpace(batchCategory)">
                                Confirm Selected (@selectedFiles.Count(kvp => kvp.Value))
                            </button>
                            <button class="btn btn-secondary" @onclick="RejectSelectedFiles">
                                Reject Selected
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="empty-state">
                    <div class="empty-icon">âœ¨</div>
                    <h3>All caught up!</h3>
                    <p>No files are currently pending review. New files will appear here when they're ready for classification.</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<TrackedFile>? pendingFiles;
    private bool isLoading = true;
    private Dictionary<string, bool> selectedFiles = new();
    private string batchCategory = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPendingFiles();
    }

    private async Task LoadPendingFiles()
    {
        isLoading = true;
        try
        {
            pendingFiles = await FileService.GetPendingReviewFilesAsync();
            selectedFiles = pendingFiles?.ToDictionary(f => f.Hash, f => false) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pending files: {ex.Message}");
            pendingFiles = new List<TrackedFile>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshFiles()
    {
        await LoadPendingFiles();
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var selectAll = (bool)(e.Value ?? false);
        foreach (var key in selectedFiles.Keys.ToList())
        {
            selectedFiles[key] = selectAll;
        }
    }

    private async Task ConfirmFile(TrackedFile file)
    {
        var category = file.SuggestedCategory ?? "UNKNOWN";
        var success = await FileService.ConfirmAndMoveFileAsync(file.Hash, category);
        
        if (success)
        {
            await LoadPendingFiles(); // Refresh the list
        }
        else
        {
            // TODO: Show error message
            Console.WriteLine($"Failed to confirm file: {file.FileName}");
        }
    }

    private async Task RejectFile(TrackedFile file)
    {
        var success = await FileService.RejectFileAsync(file.Hash, "User rejected");
        
        if (success)
        {
            await LoadPendingFiles(); // Refresh the list
        }
        else
        {
            // TODO: Show error message
            Console.WriteLine($"Failed to reject file: {file.FileName}");
        }
    }

    private async Task ConfirmSelectedFiles()
    {
        if (string.IsNullOrWhiteSpace(batchCategory))
            return;

        var selectedHashes = selectedFiles.Where(kvp => kvp.Value).Select(kvp => kvp.Key);
        var successCount = await FileService.ConfirmMultipleFilesAsync(selectedHashes, batchCategory);
        
        // TODO: Show success/failure message
        Console.WriteLine($"Confirmed {successCount} files");
        
        batchCategory = "";
        await LoadPendingFiles();
    }

    private async Task RejectSelectedFiles()
    {
        var selectedHashes = selectedFiles.Where(kvp => kvp.Value).Select(kvp => kvp.Key);
        var successCount = await FileService.RejectMultipleFilesAsync(selectedHashes, "User rejected (batch)");
        
        // TODO: Show success/failure message
        Console.WriteLine($"Rejected {successCount} files");
        
        await LoadPendingFiles();
    }

    private string GetConfidenceLevel(decimal confidence)
    {
        return confidence switch
        {
            >= 0.8m => "high",
            >= 0.6m => "medium",
            _ => "low"
        };
    }
}

<style>
    .header-actions {
        display: flex;
        gap: 0.5rem;
    }

    .action-buttons {
        display: flex;
        gap: 0.25rem;
    }

    .confidence-badge {
        padding: 0.125rem 0.375rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .confidence-high { background: #dcfce7; color: #166534; }
    .confidence-medium { background: #fef3c7; color: #92400e; }
    .confidence-low { background: #fee2e2; color: #991b1b; }

    .batch-actions {
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid var(--gray-200);
    }

    .batch-actions h4 {
        margin: 0 0 0.75rem 0;
        font-size: 1rem;
        color: var(--gray-700);
    }

    .batch-controls {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        flex-wrap: wrap;
    }

    .form-input {
        padding: 0.5rem;
        border: 1px solid var(--gray-300);
        border-radius: 0.375rem;
        font-size: 0.875rem;
        min-width: 200px;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }

    .empty-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .empty-state h3 {
        margin: 0 0 0.5rem 0;
        color: var(--gray-700);
    }

    .empty-state p {
        color: var(--gray-500);
        margin: 0;
    }

    @@media (max-width: 768px) {
        .batch-controls {
            flex-direction: column;
            align-items: stretch;
        }
        
        .form-input {
            min-width: 100%;
        }
        
        .action-buttons {
            flex-direction: column;
        }
    }
</style>