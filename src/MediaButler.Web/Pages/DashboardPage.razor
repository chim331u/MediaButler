@page "/dashboard"
@page "/"
@using MediaButler.Web.Components.Dashboard
@inherits MediaButler.Web.Components.Base.MediaButlerComponentBase

<PageTitle>Dashboard - MediaButler</PageTitle>

<div class="dashboard-container">
    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-title">
                <Icon Name="layout-dashboard" CssClass="large primary-color" />
                <div>
                    <h1>Dashboard</h1>
                    <span class="header-subtitle">System overview and quick actions</span>
                </div>
            </div>
            <div class="header-actions">
                <button class="btn btn-ghost" @onclick="RefreshDashboard" disabled="@IsRefreshing" title="Refresh all dashboard data">
                    @if (IsRefreshing)
                    {
                        <div class="loading-spinner small"></div>
                    }
                    else
                    {
                        <Icon Name="refresh" CssClass="small" />
                    }
                    Refresh
                </button>
                <button class="btn btn-secondary" @onclick="ToggleLayout" title="@(IsCompactLayout ? "Expand" : "Compact") layout">
                    <Icon Name="@(IsCompactLayout ? "maximize" : "minimize")" CssClass="small" />
                    @(IsCompactLayout ? "Expand" : "Compact")
                </button>
            </div>
        </div>
        
        @if (LastRefreshTime.HasValue)
        {
            <div class="last-refresh">
                <Icon Name="clock" CssClass="small" />
                <span>Last updated: @GetLastRefreshDisplay()</span>
            </div>
        }
    </div>

    <!-- Dashboard Content -->
    @if (IsLoading && !HasInitialData)
    {
        <div class="dashboard-loading">
            <div class="loading-container">
                <div class="loading-spinner large"></div>
                <h2>Loading Dashboard</h2>
                <p>Fetching system status and recent activity...</p>
            </div>
        </div>
    }
    else if (HasError && !HasInitialData)
    {
        <div class="dashboard-error">
            <div class="error-container">
                <Icon Name="alert-triangle" CssClass="large error-color" />
                <h2>Dashboard Error</h2>
                <p>@ErrorMessage</p>
                <div class="error-actions">
                    <button class="btn btn-primary" @onclick="RefreshDashboard">
                        <Icon Name="refresh" CssClass="small" />
                        Retry
                    </button>
                    <button class="btn btn-secondary" @onclick="NavigateToFiles">
                        <Icon Name="files" CssClass="small" />
                        View Files Instead
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="dashboard-grid @(IsCompactLayout ? "compact" : "expanded")">
            <!-- System Status Cards - Always visible -->
            <div class="dashboard-section system-status" id="system-status">
                <SystemStatusCardsComponent AutoRefresh="true" />
            </div>

            <!-- Main Content Area -->
            <div class="dashboard-main">
                @if (SelectedSection == DashboardSection.Overview || IsCompactLayout)
                {
                    <!-- Statistics Charts -->
                    <div class="dashboard-section statistics" id="statistics">
                        <StatisticsChartsComponent AutoRefreshCharts="true" />
                    </div>
                }

                @if (SelectedSection == DashboardSection.Queue || IsCompactLayout)
                {
                    <!-- Processing Queue -->
                    <div class="dashboard-section processing" id="processing-queue">
                        <ProcessingQueueComponent IsAutoRefresh="true" />
                    </div>
                }

                @if (SelectedSection == DashboardSection.Activity || IsCompactLayout)
                {
                    <!-- Activity Feed -->
                    <div class="dashboard-section activity" id="activity">
                        <ActivityFeedComponent EnableRealTime="true" MaxItems="20" />
                    </div>
                }
            </div>

            <!-- Quick Actions Sidebar -->
            <div class="dashboard-sidebar">
                <!-- Section Navigation (when not compact) -->
                @if (!IsCompactLayout)
                {
                    <div class="section-navigation">
                        <h3>Sections</h3>
                        <nav class="nav-sections">
                            <button class="nav-section @(SelectedSection == DashboardSection.Overview ? "active" : "")" 
                                    @onclick="() => SelectSection(DashboardSection.Overview)">
                                <Icon Name="pie-chart" CssClass="small" />
                                Overview
                            </button>
                            <button class="nav-section @(SelectedSection == DashboardSection.Queue ? "active" : "")" 
                                    @onclick="() => SelectSection(DashboardSection.Queue)">
                                <Icon Name="cpu" CssClass="small" />
                                Processing
                            </button>
                            <button class="nav-section @(SelectedSection == DashboardSection.Activity ? "active" : "")" 
                                    @onclick="() => SelectSection(DashboardSection.Activity)">
                                <Icon Name="activity" CssClass="small" />
                                Activity
                            </button>
                        </nav>
                    </div>
                }

                <!-- Quick Actions -->
                <div class="dashboard-section actions" id="quick-actions">
                    <QuickActionsComponent OnActionCompleted="OnActionCompleted" />
                </div>
            </div>
        </div>

        <!-- Dashboard Footer -->
        <div class="dashboard-footer">
            <div class="footer-stats">
                <div class="stat-item">
                    <Icon Name="database" CssClass="small" />
                    <span>@TotalFiles files tracked</span>
                </div>
                <div class="stat-item">
                    <Icon Name="clock" CssClass="small" />
                    <span>@SystemUptime uptime</span>
                </div>
                <div class="stat-item">
                    <Icon Name="wifi" CssClass="@($"small {(IsOnline ? "success-color" : "error-color")}")" />
                    <span>@(IsOnline ? "Online" : "Offline")</span>
                </div>
            </div>
            <div class="footer-actions">
                <button class="btn btn-ghost" @onclick="NavigateToFiles" title="Go to file management">
                    <Icon Name="files" CssClass="small" />
                    Manage Files
                </button>
                <button class="btn btn-ghost" @onclick="NavigateToSettings" title="Go to settings">
                    <Icon Name="settings" CssClass="small" />
                    Settings
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    // Dashboard state
    private DashboardSection SelectedSection { get; set; } = DashboardSection.Overview;
    private bool IsCompactLayout { get; set; } = false;
    private bool IsRefreshing { get; set; } = false;
    private DateTime? LastRefreshTime { get; set; }
    private bool HasInitialData => LastRefreshTime.HasValue;

    // Dashboard data
    private int TotalFiles { get; set; } = 0;
    private string SystemUptime { get; set; } = "0h 0m";
    private bool IsOnline { get; set; } = true;

    // Refresh timer
    private Timer? _refreshTimer;
    private const int AutoRefreshIntervalMs = 120000; // 2 minutes

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadDashboardDataAsync();
        
        // Set up auto-refresh for dashboard data
        _refreshTimer = new Timer(_ => _ = AutoRefreshAsync(), null, AutoRefreshIntervalMs, AutoRefreshIntervalMs);
    }

    private async Task LoadDashboardDataAsync()
    {
        await ExecuteAsync(async () =>
        {
            // Load basic dashboard data
            // TODO: Replace with actual API calls
            TotalFiles = await GetTotalFilesAsync();
            SystemUptime = await GetSystemUptimeAsync();
            IsOnline = await CheckSystemOnlineAsync();
            
            LastRefreshTime = DateTime.Now;
            StateHasChanged();
        }, "Loading dashboard data");
    }

    private async Task RefreshDashboard()
    {
        IsRefreshing = true;
        StateHasChanged();

        try
        {
            await LoadDashboardDataAsync();
            
            // Trigger refresh of child components
            StateHasChanged();
        }
        finally
        {
            IsRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task AutoRefreshAsync()
    {
        if (!IsRefreshing)
        {
            try
            {
                await InvokeAsync(async () =>
                {
                    await LoadDashboardDataAsync();
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error during dashboard auto-refresh");
            }
        }
    }

    // Event Handlers
    private async Task OnActionCompleted()
    {
        // Refresh dashboard data when an action is completed
        await LoadDashboardDataAsync();
    }

    private void SelectSection(DashboardSection section)
    {
        SelectedSection = section;
        StateHasChanged();
    }

    private void ToggleLayout()
    {
        IsCompactLayout = !IsCompactLayout;
        StateHasChanged();
    }

    private void NavigateToFiles()
    {
        Navigation.NavigateTo("/files");
    }

    private void NavigateToSettings()
    {
        Navigation.NavigateTo("/settings");
    }

    // Helper Methods
    private string GetLastRefreshDisplay()
    {
        if (!LastRefreshTime.HasValue) return "Never";
        
        var elapsed = DateTime.Now - LastRefreshTime.Value;
        if (elapsed.TotalSeconds < 30)
            return "Just now";
        if (elapsed.TotalMinutes < 1)
            return $"{(int)elapsed.TotalSeconds}s ago";
        if (elapsed.TotalMinutes < 60)
            return $"{(int)elapsed.TotalMinutes}m ago";
        
        return LastRefreshTime.Value.ToString("HH:mm");
    }

    // Mock data methods (replace with actual API calls)
    private async Task<int> GetTotalFilesAsync()
    {
        await Task.Delay(100);
        return new Random().Next(1000, 5000);
    }

    private async Task<string> GetSystemUptimeAsync()
    {
        await Task.Delay(50);
        var uptime = DateTime.Now - DateTime.Today;
        if (uptime.TotalDays >= 1)
            return $"{(int)uptime.TotalDays}d {uptime.Hours}h";
        if (uptime.TotalHours >= 1)
            return $"{uptime.Hours}h {uptime.Minutes}m";
        return $"{uptime.Minutes}m";
    }

    private async Task<bool> CheckSystemOnlineAsync()
    {
        await Task.Delay(50);
        return true; // Assume online for now
    }

    public override void Dispose()
    {
        _refreshTimer?.Dispose();
        base.Dispose();
    }

    // Enums
    private enum DashboardSection
    {
        Overview,
        Queue,
        Activity
    }
}

<style>
    .dashboard-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        background: var(--background);
        color: var(--text-primary);
    }

    /* Dashboard Header */
    .dashboard-header {
        background: var(--background-elevated);
        border-bottom: 1px solid var(--border-color);
        padding: var(--space-4) var(--space-6);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-2);
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: var(--space-3);
    }

    .header-title h1 {
        margin: 0;
        font-size: var(--text-3xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
    }

    .header-subtitle {
        font-size: var(--text-base);
        color: var(--text-secondary);
        font-weight: var(--font-normal);
    }

    .header-actions {
        display: flex;
        gap: var(--space-2);
    }

    .last-refresh {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    /* Dashboard Grid */
    .dashboard-grid {
        display: grid;
        flex: 1;
        gap: var(--space-6);
        padding: var(--space-6);
        max-width: 1600px;
        margin: 0 auto;
        width: 100%;
    }

    .dashboard-grid.expanded {
        grid-template-columns: 1fr 320px;
        grid-template-rows: auto 1fr;
        grid-template-areas: 
            "status status"
            "main sidebar";
    }

    .dashboard-grid.compact {
        grid-template-columns: 1fr 280px;
        grid-template-rows: auto auto auto auto;
        grid-template-areas: 
            "status status"
            "statistics sidebar"
            "processing sidebar"  
            "activity sidebar";
    }

    .system-status { grid-area: status; }
    .dashboard-main { 
        grid-area: main;
        display: flex;
        flex-direction: column;
        gap: var(--space-6);
        min-width: 0;
    }
    .dashboard-sidebar { 
        grid-area: sidebar;
        display: flex;
        flex-direction: column;
        gap: var(--space-4);
    }

    .dashboard-grid.compact .statistics { grid-area: statistics; }
    .dashboard-grid.compact .processing { grid-area: processing; }
    .dashboard-grid.compact .activity { grid-area: activity; }

    .dashboard-section {
        background: var(--background-elevated);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        border: 1px solid var(--border-color);
        transition: box-shadow 0.2s ease;
        min-width: 0;
    }

    .dashboard-section:hover {
        box-shadow: var(--shadow-sm);
    }

    /* Section Navigation */
    .section-navigation {
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        margin-bottom: var(--space-4);
    }

    .section-navigation h3 {
        margin: 0 0 var(--space-3) 0;
        font-size: var(--text-lg);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
    }

    .nav-sections {
        display: flex;
        flex-direction: column;
        gap: var(--space-1);
    }

    .nav-section {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        padding: var(--space-2) var(--space-3);
        background: none;
        border: none;
        border-radius: var(--radius-md);
        color: var(--text-secondary);
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
    }

    .nav-section:hover {
        background: var(--background-subtle);
        color: var(--text-primary);
    }

    .nav-section.active {
        background: var(--primary-color);
        color: white;
    }

    /* Dashboard Footer */
    .dashboard-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-4) var(--space-6);
        background: var(--background-elevated);
        border-top: 1px solid var(--border-color);
        margin-top: auto;
    }

    .footer-stats {
        display: flex;
        gap: var(--space-6);
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    .footer-actions {
        display: flex;
        gap: var(--space-2);
    }

    /* Loading and Error States */
    .dashboard-loading,
    .dashboard-error {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 500px;
    }

    .loading-container,
    .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: var(--space-4);
        max-width: 400px;
        padding: var(--space-8);
    }

    .error-container h2 {
        margin: 0;
        color: var(--error-color);
    }

    .error-actions {
        display: flex;
        gap: var(--space-3);
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .dashboard-grid.expanded {
            grid-template-columns: 1fr;
            grid-template-areas: 
                "status"
                "main"
                "sidebar";
        }
    }

    @@media (max-width: 768px) {
        .dashboard-header {
            padding: var(--space-3) var(--space-4);
        }

        .header-content {
            flex-direction: column;
            gap: var(--space-3);
            align-items: stretch;
        }

        .header-actions {
            justify-content: center;
        }

        .dashboard-grid {
            grid-template-columns: 1fr;
            padding: var(--space-4);
            gap: var(--space-4);
        }

        .dashboard-grid.compact,
        .dashboard-grid.expanded {
            grid-template-areas: 
                "status"
                "main"
                "sidebar";
        }

        .dashboard-footer {
            flex-direction: column;
            gap: var(--space-3);
            padding: var(--space-3) var(--space-4);
            text-align: center;
        }

        .footer-stats {
            justify-content: center;
            flex-wrap: wrap;
            gap: var(--space-4);
        }

        .header-title h1 {
            font-size: var(--text-2xl);
        }
    }

    @@media (max-width: 480px) {
        .dashboard-grid {
            padding: var(--space-3);
            gap: var(--space-3);
        }

        .dashboard-section {
            padding: var(--space-3);
        }

        .section-navigation {
            padding: var(--space-3);
            margin-bottom: var(--space-3);
        }

        .header-title {
            gap: var(--space-2);
        }

        .header-title h1 {
            font-size: var(--text-xl);
        }

        .footer-stats {
            gap: var(--space-3);
        }
    }
</style>