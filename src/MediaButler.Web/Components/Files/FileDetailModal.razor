@using MediaButler.Core.Entities
@using MediaButler.Core.Enums
@using MediaButler.Web.Models
@namespace MediaButler.Web.Components.Files
@inherits MediaButlerComponentBase
@inject IFileManagementService FileService
@inject INotificationService NotificationService

@if (IsVisible && File != null)
{
    <div class="modal-overlay" @onclick="HandleOverlayClick">
        <div class="modal-container file-detail-modal" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="modal-header">
                <div class="modal-title">
                    <Icon Name="files" CssClass="large" />
                    <h2>File Details</h2>
                </div>
                <button class="modal-close-btn" @onclick="CloseModal" title="Close">
                    <Icon Name="close" CssClass="medium" />
                </button>
            </div>

            <!-- Modal Content -->
            <div class="modal-content">
                @if (IsLoading)
                {
                    <div class="loading-section">
                        <LoadingSpinner Text="Loading file details..." />
                    </div>
                }
                else if (HasError)
                {
                    <div class="error-section">
                        <ErrorAlert ErrorMessage="@ErrorMessage" OnDismissed="ClearError" />
                    </div>
                }
                else
                {
                    <!-- File Information Section -->
                    <div class="detail-section">
                        <h3 class="section-title">
                            <Icon Name="info" CssClass="medium" />
                            File Information
                        </h3>
                        <div class="detail-grid">
                            <div class="detail-item">
                                <label>Filename</label>
                                <div class="detail-value filename">
                                    <Icon FileExtension="@Path.GetExtension(File.FileName)" CssClass="medium" />
                                    <span>@File.FileName</span>
                                </div>
                            </div>
                            <div class="detail-item">
                                <label>File Size</label>
                                <div class="detail-value">@FormatFileSize(File.FileSize)</div>
                            </div>
                            <div class="detail-item">
                                <label>Status</label>
                                <div class="detail-value">
                                    <StatusBadge Status="@File.Status" />
                                </div>
                            </div>
                            <div class="detail-item">
                                <label>Hash (SHA256)</label>
                                <div class="detail-value hash">
                                    <code>@File.Hash</code>
                                    <button class="copy-btn" @onclick="@(() => CopyToClipboard(File.Hash))" title="Copy hash">
                                        <Icon Name="copy" CssClass="small" />
                                    </button>
                                </div>
                            </div>
                            <div class="detail-item">
                                <label>Original Path</label>
                                <div class="detail-value path">
                                    <code>@File.OriginalPath</code>
                                    <button class="copy-btn" @onclick="@(() => CopyToClipboard(File.OriginalPath))" title="Copy path">
                                        <Icon Name="copy" CssClass="small" />
                                    </button>
                                </div>
                            </div>
                            <div class="detail-item">
                                <label>Created Date</label>
                                <div class="detail-value">@File.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                            </div>
                            <div class="detail-item">
                                <label>Last Updated</label>
                                <div class="detail-value">@File.LastUpdateDate.ToString("MMM dd, yyyy HH:mm")</div>
                            </div>
                        </div>
                    </div>

                    <!-- ML Classification Section -->
                    <div class="detail-section">
                        <h3 class="section-title">
                            <Icon Name="brain" CssClass="medium" />
                            ML Classification
                        </h3>
                        @if (!string.IsNullOrEmpty(File.SuggestedCategory))
                        {
                            <div class="classification-results">
                                <div class="classification-item">
                                    <label>Suggested Category</label>
                                    <div class="classification-value">
                                        <span class="category-name">@File.SuggestedCategory</span>
                                        <div class="confidence-score">
                                            <span class="confidence-label">Confidence:</span>
                                            <div class="confidence-bar">
                                                <div class="confidence-fill" style="width: @(File.Confidence * 100)%"></div>
                                            </div>
                                            <span class="confidence-text">@File.Confidence.ToString("P1")</span>
                                        </div>
                                    </div>
                                </div>
                                @if (File.ClassifiedAt.HasValue)
                                {
                                    <div class="classification-item">
                                        <label>Classification Date</label>
                                        <div class="classification-value">@File.ClassifiedAt.Value.ToString("MMM dd, yyyy HH:mm")</div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-classification">
                                <Icon Name="info" CssClass="large" />
                                <p>No ML classification available yet.</p>
                                @if (File.Status == FileStatus.New)
                                {
                                    <p class="status-hint">File is queued for processing.</p>
                                }
                            </div>
                        }
                    </div>

                    <!-- Category Management Section -->
                    <div class="detail-section">
                        <h3 class="section-title">
                            <Icon Name="folder" CssClass="medium" />
                            Category Management
                        </h3>
                        <div class="category-management">
                            @if (isEditingCategory)
                            {
                                <div class="category-edit">
                                    <div class="edit-form">
                                        <label for="categoryInput">Category Name</label>
                                        <div class="input-group">
                                            <input id="categoryInput" 
                                                   type="text" 
                                                   class="category-input" 
                                                   @bind="editingCategoryName" 
                                                   placeholder="Enter category name..." />
                                            <div class="edit-actions">
                                                <button class="save-btn" @onclick="SaveCategory" disabled="@(string.IsNullOrWhiteSpace(editingCategoryName))">
                                                    <Icon Name="confirm" CssClass="small" />
                                                    Save
                                                </button>
                                                <button class="cancel-btn" @onclick="CancelCategoryEdit">
                                                    <Icon Name="close" CssClass="small" />
                                                    Cancel
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(File.SuggestedCategory) && File.SuggestedCategory != editingCategoryName)
                                    {
                                        <button class="suggestion-btn" @onclick="@(() => editingCategoryName = File.SuggestedCategory)">
                                            Use ML Suggestion: @File.SuggestedCategory
                                        </button>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="category-display">
                                    @if (!string.IsNullOrEmpty(File.Category))
                                    {
                                        <div class="current-category">
                                            <label>Current Category</label>
                                            <div class="category-value confirmed">
                                                <Icon Name="folder" CssClass="medium" />
                                                <span>@File.Category</span>
                                                <span class="status-indicator confirmed">Confirmed</span>
                                            </div>
                                        </div>
                                    }
                                    else if (!string.IsNullOrEmpty(File.SuggestedCategory))
                                    {
                                        <div class="suggested-category">
                                            <label>Suggested Category</label>
                                            <div class="category-value suggested">
                                                <Icon Name="folder" CssClass="medium" />
                                                <span>@File.SuggestedCategory</span>
                                                <span class="status-indicator suggested">Suggested</span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="no-category">
                                            <Icon Name="info" CssClass="large" />
                                            <p>No category assigned yet.</p>
                                        </div>
                                    }
                                    
                                    @if (File.Status == FileStatus.Classified || File.Status == FileStatus.New)
                                    {
                                        <button class="edit-category-btn" @onclick="StartCategoryEdit">
                                            <Icon Name="edit" CssClass="small" />
                                            @(string.IsNullOrEmpty(File.Category) ? "Set Category" : "Edit Category")
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Processing History Section -->
                    <div class="detail-section">
                        <h3 class="section-title">
                            <Icon Name="history" CssClass="medium" />
                            Processing History
                        </h3>
                        @if (processingHistory?.Any() == true)
                        {
                            <div class="history-timeline">
                                @foreach (var entry in processingHistory.OrderByDescending(h => h.CreatedDate))
                                {
                                    <div class="timeline-item @entry.Level.ToString().ToLower()">
                                        <div class="timeline-marker">
                                            <Icon Name="@GetHistoryIcon(entry.Level)" CssClass="small" />
                                        </div>
                                        <div class="timeline-content">
                                            <div class="timeline-header">
                                                <span class="timeline-category">@entry.Category</span>
                                                <span class="timeline-date">@entry.CreatedDate.ToString("MMM dd, HH:mm")</span>
                                            </div>
                                            <div class="timeline-message">@entry.Message</div>
                                            @if (!string.IsNullOrEmpty(entry.Details))
                                            {
                                                <div class="timeline-details">@entry.Details</div>
                                            }
                                            @if (entry.DurationMs.HasValue)
                                            {
                                                <div class="timeline-duration">Duration: @entry.DurationMs.Value ms</div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-history">
                                <Icon Name="info" CssClass="large" />
                                <p>No processing history available.</p>
                            </div>
                        }
                    </div>

                    <!-- Error Information (if any) -->
                    @if (!string.IsNullOrEmpty(File.LastError))
                    {
                        <div class="detail-section error-section">
                            <h3 class="section-title">
                                <Icon Name="error" CssClass="medium" />
                                Error Information
                            </h3>
                            <div class="error-details">
                                <div class="error-item">
                                    <label>Last Error</label>
                                    <div class="error-message">@File.LastError</div>
                                </div>
                                @if (File.LastErrorAt.HasValue)
                                {
                                    <div class="error-item">
                                        <label>Error Date</label>
                                        <div class="error-date">@File.LastErrorAt.Value.ToString("MMM dd, yyyy HH:mm")</div>
                                    </div>
                                }
                                <div class="error-item">
                                    <label>Retry Count</label>
                                    <div class="retry-count">@File.RetryCount attempts</div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer">
                <div class="footer-actions">
                    @if (File?.Status == FileStatus.Classified && !isEditingCategory)
                    {
                        <button class="action-btn confirm" @onclick="ConfirmFile" disabled="@IsLoading">
                            <Icon Name="confirm" CssClass="small" />
                            Confirm & Move
                        </button>
                        <button class="action-btn reject" @onclick="RejectFile" disabled="@IsLoading">
                            <Icon Name="reject" CssClass="small" />
                            Reject
                        </button>
                    }
                    <button class="action-btn secondary" @onclick="CloseModal">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public TrackedFile? File { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }
    [Parameter] public EventCallback<TrackedFile> OnFileUpdated { get; set; }

    private List<ProcessingLogEntry>? processingHistory;
    private bool isEditingCategory = false;
    private string editingCategoryName = "";

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && File != null && !HasError)
        {
            await LoadProcessingHistory();
        }
    }

    private async Task LoadProcessingHistory()
    {
        if (File == null) return;

        await ExecuteAsync(async () =>
        {
            // TODO: Implement GetFileProcessingHistoryAsync in FileManagementService
            // processingHistory = await FileService.GetFileProcessingHistoryAsync(File.Hash);
            processingHistory = new List<ProcessingLogEntry>(); // Placeholder
        }, "Loading processing history");
    }

    private async Task CloseModal()
    {
        ClearError();
        isEditingCategory = false;
        editingCategoryName = "";
        await OnClosed.InvokeAsync();
    }

    private void HandleOverlayClick()
    {
        // Only close if not editing category to prevent accidental closes
        if (!isEditingCategory)
        {
            _ = CloseModal();
        }
    }

    private void StartCategoryEdit()
    {
        isEditingCategory = true;
        editingCategoryName = File?.Category ?? File?.SuggestedCategory ?? "";
    }

    private void CancelCategoryEdit()
    {
        isEditingCategory = false;
        editingCategoryName = "";
    }

    private async Task SaveCategory()
    {
        if (File == null || string.IsNullOrWhiteSpace(editingCategoryName)) return;

        await ExecuteAsync(async () =>
        {
            var success = await FileService.UpdateFileCategoryAsync(File.Hash, editingCategoryName.Trim());
            if (success)
            {
                File.Category = editingCategoryName.Trim();
                File.Status = FileStatus.ReadyToMove;
                NotificationService.ShowSuccess("Category Updated", $"Category set to '{editingCategoryName.Trim()}'");
                isEditingCategory = false;
                editingCategoryName = "";
                await OnFileUpdated.InvokeAsync(File);
            }
            else
            {
                throw new InvalidOperationException("Failed to update category");
            }
        }, "Updating category");
    }

    private async Task ConfirmFile()
    {
        if (File == null) return;

        await ExecuteAsync(async () =>
        {
            var category = File.Category ?? File.SuggestedCategory ?? "UNKNOWN";
            var success = await FileService.ConfirmAndMoveFileAsync(File.Hash, category);
            if (success)
            {
                NotificationService.ShowSuccess("File Confirmed", $"{File.FileName} has been processed");
                await OnFileUpdated.InvokeAsync(File);
                await CloseModal();
            }
            else
            {
                throw new InvalidOperationException("Failed to confirm file");
            }
        }, "Confirming file");
    }

    private async Task RejectFile()
    {
        if (File == null) return;

        await ExecuteAsync(async () =>
        {
            var success = await FileService.RejectFileAsync(File.Hash, "User rejected from details view");
            if (success)
            {
                NotificationService.ShowSuccess("File Rejected", $"{File.FileName} has been rejected");
                await OnFileUpdated.InvokeAsync(File);
                await CloseModal();
            }
            else
            {
                throw new InvalidOperationException("Failed to reject file");
            }
        }, "Rejecting file");
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            // TODO: Implement clipboard functionality
            NotificationService.ShowInfo("Copied", "Text copied to clipboard");
        }
        catch
        {
            NotificationService.ShowError("Copy Failed", "Unable to copy to clipboard");
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string GetHistoryIcon(LogLevel level)
    {
        return level switch
        {
            LogLevel.Error => "error",
            LogLevel.Warning => "warning",
            LogLevel.Information => "info",
            _ => "circle"
        };
    }

    // Placeholder for ProcessingLogEntry until we implement the service
    private class ProcessingLogEntry
    {
        public LogLevel Level { get; set; }
        public string Category { get; set; } = "";
        public string Message { get; set; } = "";
        public string? Details { get; set; }
        public long? DurationMs { get; set; }
        public DateTime CreatedDate { get; set; }
    }

    private enum LogLevel
    {
        Information,
        Warning,
        Error
    }
}