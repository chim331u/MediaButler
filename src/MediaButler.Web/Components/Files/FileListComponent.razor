@using MediaButler.Core.Entities
@using MediaButler.Core.Enums
@using MediaButler.Web.Models
@namespace MediaButler.Web.Components.Files
@inherits DataComponentBase<FileListModel>
@inject IFileManagementService FileService
@inject INotificationService NotificationService

<div class="file-list-component">
    <!-- Search and Filter Bar -->
    <div class="file-list-toolbar">
        <div class="search-section">
            <div class="search-input-group">
                <input type="text" 
                       class="search-input" 
                       placeholder="Search files..." 
                       @bind="searchTerm" 
                       @onkeypress="@(async (e) => { if (e.Key == "Enter") await SearchFiles(); })" />
                <button class="search-btn" @onclick="SearchFiles" disabled="@IsLoading">
                    <Icon Name="search" CssClass="small" />
                </button>
            </div>
            
            @if (!string.IsNullOrEmpty(searchTerm) || statusFilter.HasValue || !string.IsNullOrEmpty(categoryFilter))
            {
                <button class="clear-filters-btn" @onclick="ClearFilters">
                    <Icon Name="close" CssClass="small" />
                    Clear Filters
                </button>
            }
        </div>
        
        <div class="filter-section">
            <select class="filter-select" @bind="statusFilter" @bind:after="OnFilterChanged">
                <option value="">All Statuses</option>
                @foreach (var status in Enum.GetValues<FileStatus>())
                {
                    <option value="@status">@status</option>
                }
            </select>
            
            <input type="text" 
                   class="filter-input" 
                   placeholder="Category..." 
                   @bind="categoryFilter" 
                   @bind:after="OnFilterChanged" />
        </div>
        
        <div class="actions-section">
            @if (selectedFiles.Any())
            {
                <div class="batch-actions">
                    <span class="selection-count">@selectedFiles.Count selected</span>
                    <button class="batch-btn confirm" @onclick="ConfirmSelectedFiles" disabled="@IsLoading">
                        <Icon Name="confirm" CssClass="small" />
                        Confirm
                    </button>
                    <button class="batch-btn reject" @onclick="RejectSelectedFiles" disabled="@IsLoading">
                        <Icon Name="reject" CssClass="small" />
                        Reject
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- File List -->
    @if (IsLoading)
    {
        <PageLoadingState LoadingType="PageLoadingState.LoadingStateType.Skeleton" SkeletonLines="5" />
    }
    else if (HasError)
    {
        <ErrorAlert ErrorMessage="@ErrorMessage" OnDismissed="ClearError" />
    }
    else if (Data?.Files.Any() == true)
    {
        <div class="file-list-container">
            <!-- Desktop Table View -->
            <div class="desktop-table">
                <table class="file-table">
                    <thead>
                        <tr>
                            <th class="select-column">
                                <input type="checkbox" 
                                       @onchange="ToggleSelectAll" 
                                       checked="@(selectedFiles.Count == Data.Files.Count() && Data.Files.Any())" />
                            </th>
                            @foreach (var (sortKey, label) in FileSortOptions.Options)
                            {
                                <th class="sortable @(currentRequest.SortBy == sortKey ? "active" : "")" 
                                    @onclick="@(() => SortBy(sortKey))">
                                    @label
                                    @if (currentRequest.SortBy == sortKey)
                                    {
                                        <Icon Name="@(currentRequest.SortDescending ? "down" : "up")" CssClass="sort-icon small" />
                                    }
                                </th>
                            }
                            <th class="actions-column">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var file in Data.Files)
                        {
                            <tr class="file-row @(selectedFiles.Contains(file.Hash) ? "selected" : "")">
                                <td class="select-cell">
                                    <input type="checkbox" 
                                           @onchange="@((e) => ToggleFileSelection(file.Hash, (bool)(e.Value ?? false)))" 
                                           checked="@selectedFiles.Contains(file.Hash)" />
                                </td>
                                <td class="filename-cell">
                                    <div class="file-info">
                                        <Icon FileExtension="@Path.GetExtension(file.FileName)" CssClass="file-icon medium" />
                                        <span class="filename">@file.FileName</span>
                                    </div>
                                </td>
                                <td class="filesize-cell">@FormatFileSize(file.FileSize)</td>
                                <td class="date-cell">@file.CreatedDate.ToString("MMM dd, yyyy")</td>
                                <td class="date-cell">@file.LastUpdateDate.ToString("MMM dd, yyyy")</td>
                                <td class="status-cell">
                                    <StatusBadge Status="@file.Status" />
                                </td>
                                <td class="category-cell">@(file.Category ?? "Not classified")</td>
                                <td class="confidence-cell">
                                    @if (file.Confidence > 0)
                                    {
                                        <span class="confidence-value">@($"{file.Confidence:P0}")</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">â€”</span>
                                    }
                                </td>
                                <td class="actions-cell">
                                    <div class="file-actions">
                                        @if (file.Status == FileStatus.Classified)
                                        {
                                            <button class="action-btn confirm" @onclick="@(() => ConfirmFile(file))" title="Confirm">
                                                <Icon Name="confirm" CssClass="small" />
                                            </button>
                                            <button class="action-btn reject" @onclick="@(() => RejectFile(file))" title="Reject">
                                                <Icon Name="reject" CssClass="small" />
                                            </button>
                                        }
                                        <button class="action-btn view" @onclick="@(() => ShowFileDetails(file))" title="View Details">
                                            <Icon Name="view" CssClass="small" />
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Mobile Card View -->
            <div class="mobile-cards">
                @foreach (var file in Data.Files)
                {
                    <div class="file-card @(selectedFiles.Contains(file.Hash) ? "selected" : "")">
                        <div class="card-header">
                            <input type="checkbox" 
                                   @onchange="@((e) => ToggleFileSelection(file.Hash, (bool)(e.Value ?? false)))" 
                                   checked="@selectedFiles.Contains(file.Hash)" />
                            <div class="file-info">
                                <Icon FileExtension="@Path.GetExtension(file.FileName)" CssClass="file-icon medium" />
                                <span class="filename">@file.FileName</span>
                            </div>
                            <StatusBadge Status="@file.Status" />
                        </div>
                        
                        <div class="card-body">
                            <div class="file-meta">
                                <span class="meta-item">@FormatFileSize(file.FileSize)</span>
                                <span class="meta-item">@file.CreatedDate.ToString("MMM dd")</span>
                                @if (!string.IsNullOrEmpty(file.Category))
                                {
                                    <span class="meta-item category">@file.Category</span>
                                }
                            </div>
                        </div>
                        
                        <div class="card-actions">
                            @if (file.Status == FileStatus.Classified)
                            {
                                <button class="action-btn confirm" @onclick="@(() => ConfirmFile(file))">
                                    <Icon Name="confirm" CssClass="small" />
                                    Confirm
                                </button>
                                <button class="action-btn reject" @onclick="@(() => RejectFile(file))">
                                    <Icon Name="reject" CssClass="small" />
                                    Reject
                                </button>
                            }
                            <button class="action-btn view" @onclick="@(() => ShowFileDetails(file))">
                                <Icon Name="view" CssClass="small" />
                                View
                            </button>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            @if (Data.TotalPages > 1)
            {
                <div class="pagination-container">
                    <div class="pagination-info">
                        Showing @Data.StartIndex-@Data.EndIndex of @Data.TotalCount files
                    </div>
                    
                    <div class="pagination-controls">
                        <button class="page-btn" @onclick="@(() => ChangePage(1))" disabled="@(!Data.HasPreviousPage)">
                            <Icon Name="previous" CssClass="small" />
                            First
                        </button>
                        <button class="page-btn" @onclick="@(() => ChangePage(Data.PageNumber - 1))" disabled="@(!Data.HasPreviousPage)">
                            Previous
                        </button>
                        
                        @for (int pageNum = Math.Max(1, Data.PageNumber - 2); pageNum <= Math.Min(Data.TotalPages, Data.PageNumber + 2); pageNum++)
                        {
                            <button class="page-btn @(pageNum == Data.PageNumber ? "active" : "")" 
                                    @onclick="@(() => ChangePage(pageNum))">
                                @pageNum
                            </button>
                        }
                        
                        <button class="page-btn" @onclick="@(() => ChangePage(Data.PageNumber + 1))" disabled="@(!Data.HasNextPage)">
                            Next
                        </button>
                        <button class="page-btn" @onclick="@(() => ChangePage(Data.TotalPages))" disabled="@(!Data.HasNextPage)">
                            Last
                            <Icon Name="next" CssClass="small" />
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <Icon Name="files" CssClass="empty-icon xl" />
            <h3>No files found</h3>
            <p>@(string.IsNullOrEmpty(searchTerm) ? "No files have been discovered yet." : $"No files match your search for \"{searchTerm}\".")</p>
        </div>
    }
</div>

<!-- File Detail Modal -->
<FileDetailModal File="@selectedFileForDetails" 
                 IsVisible="@isDetailModalVisible" 
                 OnClosed="CloseFileDetails" 
                 OnFileUpdated="OnFileUpdated" />

@code {
    private FileListRequest currentRequest = new();
    private HashSet<string> selectedFiles = new();
    private string searchTerm = "";
    private FileStatus? statusFilter;
    private string? categoryFilter;

    // File detail modal state
    private bool isDetailModalVisible = false;
    private TrackedFile? selectedFileForDetails;

    protected override async Task<FileListModel?> FetchDataAsync()
    {
        try
        {
            var files = await FileService.GetAllFilesAsync();
            
            // Apply filtering
            var filteredFiles = files.AsEnumerable();
            
            if (!string.IsNullOrEmpty(currentRequest.SearchTerm))
            {
                filteredFiles = filteredFiles.Where(f => 
                    f.FileName.Contains(currentRequest.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (f.Category?.Contains(currentRequest.SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
            }
            
            if (currentRequest.StatusFilter.HasValue)
            {
                filteredFiles = filteredFiles.Where(f => f.Status == currentRequest.StatusFilter.Value);
            }
            
            if (!string.IsNullOrEmpty(currentRequest.CategoryFilter))
            {
                filteredFiles = filteredFiles.Where(f => 
                    f.Category?.Contains(currentRequest.CategoryFilter, StringComparison.OrdinalIgnoreCase) ?? false);
            }
            
            var totalCount = filteredFiles.Count();
            
            // Apply sorting
            filteredFiles = currentRequest.SortBy switch
            {
                "FileName" => currentRequest.SortDescending 
                    ? filteredFiles.OrderByDescending(f => f.FileName)
                    : filteredFiles.OrderBy(f => f.FileName),
                "FileSize" => currentRequest.SortDescending
                    ? filteredFiles.OrderByDescending(f => f.FileSize)
                    : filteredFiles.OrderBy(f => f.FileSize),
                "Status" => currentRequest.SortDescending
                    ? filteredFiles.OrderByDescending(f => f.Status)
                    : filteredFiles.OrderBy(f => f.Status),
                "Category" => currentRequest.SortDescending
                    ? filteredFiles.OrderByDescending(f => f.Category)
                    : filteredFiles.OrderBy(f => f.Category),
                "Confidence" => currentRequest.SortDescending
                    ? filteredFiles.OrderByDescending(f => f.Confidence)
                    : filteredFiles.OrderBy(f => f.Confidence),
                "LastUpdateDate" => currentRequest.SortDescending
                    ? filteredFiles.OrderByDescending(f => f.LastUpdateDate)
                    : filteredFiles.OrderBy(f => f.LastUpdateDate),
                _ => currentRequest.SortDescending
                    ? filteredFiles.OrderByDescending(f => f.CreatedDate)
                    : filteredFiles.OrderBy(f => f.CreatedDate)
            };
            
            // Apply pagination
            var pagedFiles = filteredFiles
                .Skip((currentRequest.PageNumber - 1) * currentRequest.PageSize)
                .Take(currentRequest.PageSize)
                .ToList();
            
            return new FileListModel
            {
                Files = pagedFiles,
                TotalCount = totalCount,
                PageNumber = currentRequest.PageNumber,
                PageSize = currentRequest.PageSize,
                SortBy = currentRequest.SortBy,
                SortDescending = currentRequest.SortDescending,
                SearchTerm = currentRequest.SearchTerm,
                StatusFilter = currentRequest.StatusFilter,
                CategoryFilter = currentRequest.CategoryFilter
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
            return new FileListModel();
        }
    }

    private async Task SearchFiles()
    {
        currentRequest = currentRequest with 
        { 
            SearchTerm = string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm.Trim(),
            PageNumber = 1
        };
        await LoadDataAsync();
    }

    private async Task OnFilterChanged()
    {
        currentRequest = currentRequest with 
        { 
            StatusFilter = statusFilter,
            CategoryFilter = string.IsNullOrWhiteSpace(categoryFilter) ? null : categoryFilter.Trim(),
            PageNumber = 1
        };
        await LoadDataAsync();
    }

    private async Task ClearFilters()
    {
        searchTerm = "";
        statusFilter = null;
        categoryFilter = null;
        currentRequest = new FileListRequest();
        await LoadDataAsync();
    }

    private async Task SortBy(string sortBy)
    {
        var sortDescending = currentRequest.SortBy == sortBy ? !currentRequest.SortDescending : true;
        currentRequest = currentRequest with { SortBy = sortBy, SortDescending = sortDescending };
        await LoadDataAsync();
    }

    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= (Data?.TotalPages ?? 1))
        {
            currentRequest = currentRequest with { PageNumber = pageNumber };
            await LoadDataAsync();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var selectAll = (bool)(e.Value ?? false);
        selectedFiles.Clear();
        
        if (selectAll && Data?.Files != null)
        {
            foreach (var file in Data.Files)
            {
                selectedFiles.Add(file.Hash);
            }
        }
    }

    private void ToggleFileSelection(string fileHash, bool selected)
    {
        if (selected)
        {
            selectedFiles.Add(fileHash);
        }
        else
        {
            selectedFiles.Remove(fileHash);
        }
    }

    private async Task ConfirmFile(TrackedFile file)
    {
        var category = file.SuggestedCategory ?? "UNKNOWN";
        var success = await FileService.ConfirmAndMoveFileAsync(file.Hash, category);
        
        if (success)
        {
            NotificationService.ShowSuccess("File Confirmed", $"{file.FileName} has been processed");
            await LoadDataAsync();
        }
        else
        {
            NotificationService.ShowError("Confirmation Failed", $"Failed to confirm {file.FileName}");
        }
    }

    private async Task RejectFile(TrackedFile file)
    {
        var success = await FileService.RejectFileAsync(file.Hash, "User rejected");
        
        if (success)
        {
            NotificationService.ShowSuccess("File Rejected", $"{file.FileName} has been rejected");
            await LoadDataAsync();
        }
        else
        {
            NotificationService.ShowError("Rejection Failed", $"Failed to reject {file.FileName}");
        }
    }

    private async Task ConfirmSelectedFiles()
    {
        if (!selectedFiles.Any()) return;
        
        // TODO: Implement batch confirmation with category selection
        NotificationService.ShowInfo("Batch Confirm", $"Confirming {selectedFiles.Count} files...");
        selectedFiles.Clear();
        await LoadDataAsync();
    }

    private async Task RejectSelectedFiles()
    {
        if (!selectedFiles.Any()) return;
        
        // TODO: Implement batch rejection
        NotificationService.ShowInfo("Batch Reject", $"Rejecting {selectedFiles.Count} files...");
        selectedFiles.Clear();
        await LoadDataAsync();
    }

    private void ShowFileDetails(TrackedFile file)
    {
        selectedFileForDetails = file;
        isDetailModalVisible = true;
    }

    private void CloseFileDetails()
    {
        isDetailModalVisible = false;
        selectedFileForDetails = null;
    }

    private async Task OnFileUpdated(TrackedFile updatedFile)
    {
        // Refresh the file list to show updated data
        await LoadDataAsync();
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}