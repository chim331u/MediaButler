@using MediaButler.Web.Models
@* @using MediaButler.Web.Services.Files *@
@using MediaButler.Web.Services.System
@inherits MediaButler.Web.Components.Base.MediaButlerComponentBase

<div class="activity-feed-container">
    <div class="feed-header">
        <div class="header-title">
            <Icon Name="activity" CssClass="large primary-color" />
            <div>
                <h2>Recent Activity</h2>
                <span class="header-subtitle">Latest system events and operations</span>
            </div>
        </div>
        <div class="feed-controls">
            <div class="filter-dropdown">
                <select @bind="SelectedFilter" @bind:after="ApplyFilterAsync" class="filter-select">
                    <option value="all">All Events</option>
                    <option value="files">File Operations</option>
                    <option value="processing">Processing</option>
                    <option value="errors">Errors & Warnings</option>
                    <option value="system">System Events</option>
                </select>
            </div>
            <button class="btn btn-ghost" @onclick="RefreshActivityAsync" disabled="@IsLoading">
                <Icon Name="refresh" CssClass="small" />
                Refresh
            </button>
            <button class="btn btn-ghost" @onclick="ToggleAutoScroll" title="@(AutoScroll ? "Disable" : "Enable") auto-scroll">
                <Icon Name="@(AutoScroll ? "pause" : "play")" CssClass="small" />
            </button>
        </div>
    </div>

    @if (IsLoading && !_activityItems.Any())
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading recent activity...</p>
        </div>
    }
    else if (HasError)
    {
        <div class="error-container">
            <Icon Name="warning" CssClass="large error-color" />
            <h3>Error Loading Activity</h3>
            <p>@ErrorMessage</p>
            <button class="btn btn-primary" @onclick="RefreshActivityAsync">
                <Icon Name="refresh" CssClass="small" />
                Retry
            </button>
        </div>
    }
    else
    {
        <div class="feed-content" @ref="feedScrollContainer">
            @if (_activityItems.Any())
            {
                <div class="activity-timeline">
                    @foreach (var item in _activityItems)
                    {
                        <div class="activity-item @GetActivityTypeClass(item.Type)" @key="item.Id">
                            <div class="activity-indicator">
                                <div class="activity-icon">
                                    <Icon Name="@GetActivityIcon(item.Type)" CssClass="small" />
                                </div>
                                <div class="activity-line"></div>
                            </div>
                            <div class="activity-content">
                                <div class="activity-header">
                                    <div class="activity-title">@item.Title</div>
                                    <div class="activity-time" title="@item.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")">
                                        @GetRelativeTime(item.Timestamp)
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(item.Description))
                                {
                                    <div class="activity-description">@item.Description</div>
                                }
                                @if (item.Details?.Any() == true)
                                {
                                    <div class="activity-details">
                                        @foreach (var detail in item.Details)
                                        {
                                            <div class="detail-item">
                                                <span class="detail-key">@detail.Key:</span>
                                                <span class="detail-value">@detail.Value</span>
                                            </div>
                                        }
                                    </div>
                                }
                                @if (item.Type == ActivityType.Error && !string.IsNullOrEmpty(item.ErrorMessage))
                                {
                                    <div class="activity-error">
                                        <button class="error-toggle" @onclick="() => ToggleErrorDetails(item.Id)">
                                            <Icon Name="@(IsErrorExpanded(item.Id) ? "chevron-down" : "chevron-right")" CssClass="small" />
                                            @(IsErrorExpanded(item.Id) ? "Hide" : "Show") Error Details
                                        </button>
                                        @if (IsErrorExpanded(item.Id))
                                        {
                                            <div class="error-details">
                                                <pre>@item.ErrorMessage</pre>
                                            </div>
                                        }
                                    </div>
                                }
                                @if (item.Actions?.Any() == true)
                                {
                                    <div class="activity-actions">
                                        @foreach (var action in item.Actions)
                                        {
                                            <button class="action-btn @action.Type" @onclick="() => ExecuteAction(action)">
                                                <Icon Name="@action.Icon" CssClass="small" />
                                                @action.Label
                                            </button>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (HasMoreItems)
                {
                    <div class="load-more-container">
                        <button class="btn btn-secondary" @onclick="LoadMoreAsync" disabled="@IsLoading">
                            @if (IsLoading)
                            {
                                <div class="loading-spinner small"></div>
                                <span>Loading...</span>
                            }
                            else
                            {
                                <Icon Name="chevron-down" CssClass="small" />
                                <span>Load More Activity</span>
                            }
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <Icon Name="inbox" CssClass="large secondary-color" />
                    <h3>No Recent Activity</h3>
                    <p>
                        @if (SelectedFilter != "all")
                        {
                            <text>No @SelectedFilter events found.</text>
                            <button class="btn btn-ghost" @onclick="ClearFilter">Show All Events</button>
                        }
                        else
                        {
                            <text>System activity will appear here as operations are performed.</text>
                        }
                    </p>
                </div>
            }
        </div>

        <!-- Live Status Bar -->
        @if (IsRealTimeEnabled)
        {
            <div class="live-status-bar">
                <div class="status-indicator">
                    <div class="live-dot"></div>
                    <span>Live Updates</span>
                </div>
                <div class="activity-stats">
                    <span>@_activityItems.Count items</span>
                    @if (SelectedFilter != "all")
                    {
                        <span>â€¢ Filtered by @SelectedFilter</span>
                    }
                </div>
                <button class="btn-icon" @onclick="ToggleRealTime" title="@(IsRealTimeEnabled ? "Disable" : "Enable") live updates">
                    <Icon Name="@(IsRealTimeEnabled ? "wifi" : "wifi-off")" CssClass="small" />
                </button>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int MaxItems { get; set; } = 50;
    [Parameter] public bool EnableRealTime { get; set; } = true;
    [Parameter] public int RefreshIntervalMs { get; set; } = 10000; // 10 seconds

    @* [Inject] private IFileManagementService FileManagementService { get; set; } = default!; *@

    private List<ActivityItemModel> _activityItems = new();
    private List<string> _expandedErrors = new();
    private ElementReference feedScrollContainer;
    private Timer? _refreshTimer;
    private string SelectedFilter { get; set; } = "all";
    private bool AutoScroll { get; set; } = true;
    private bool IsRealTimeEnabled { get; set; } = true;
    private bool HasMoreItems { get; set; } = true;
    private int _currentPage = 0;
    private const int PageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsRealTimeEnabled = EnableRealTime;
        await RefreshActivityAsync();

        if (IsRealTimeEnabled)
        {
            _refreshTimer = new Timer(_ => _ = AutoRefreshAsync(), null, RefreshIntervalMs, RefreshIntervalMs);
        }
    }

    private async Task RefreshActivityAsync()
    {
        await ExecuteAsync(async () =>
        {
            _currentPage = 0;
            _activityItems.Clear();
            await LoadActivityPageAsync();
        }, "Loading recent activity");
    }

    private async Task LoadMoreAsync()
    {
        await ExecuteAsync(async () =>
        {
            _currentPage++;
            await LoadActivityPageAsync();
        }, "Loading more activity");
    }

    private async Task LoadActivityPageAsync()
    {
        // TODO: Replace with actual API call
        var newItems = await GenerateMockActivityAsync(_currentPage, PageSize);
        
        if (newItems.Any())
        {
            _activityItems.AddRange(newItems);
            HasMoreItems = newItems.Count >= PageSize;
        }
        else
        {
            HasMoreItems = false;
        }
        
        if (AutoScroll && _activityItems.Any())
        {
            await ScrollToBottom();
        }
        
        StateHasChanged();
    }

    private async Task ApplyFilterAsync()
    {
        await RefreshActivityAsync();
    }

    private async Task ClearFilter()
    {
        SelectedFilter = "all";
        await ApplyFilterAsync();
    }

    private async Task AutoRefreshAsync()
    {
        if (IsRealTimeEnabled)
        {
            try
            {
                await InvokeAsync(async () =>
                {
                    // Only refresh the first page to get new items
                    var newItems = await GenerateMockActivityAsync(0, PageSize);
                    
                    // Insert new items at the beginning
                    var existingIds = _activityItems.Select(i => i.Id).ToHashSet();
                    var reallyNewItems = newItems.Where(i => !existingIds.Contains(i.Id)).ToList();
                    
                    if (reallyNewItems.Any())
                    {
                        _activityItems.InsertRange(0, reallyNewItems);
                        
                        // Keep only MaxItems
                        if (_activityItems.Count > MaxItems)
                        {
                            _activityItems = _activityItems.Take(MaxItems).ToList();
                        }
                        
                        StateHasChanged();
                    }
                });
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error during activity auto-refresh");
            }
        }
    }

    // UI Event Handlers
    private void ToggleErrorDetails(string itemId)
    {
        if (_expandedErrors.Contains(itemId))
            _expandedErrors.Remove(itemId);
        else
            _expandedErrors.Add(itemId);
        
        StateHasChanged();
    }

    private bool IsErrorExpanded(string itemId) => _expandedErrors.Contains(itemId);

    private void ToggleAutoScroll()
    {
        AutoScroll = !AutoScroll;
        StateHasChanged();
    }

    private void ToggleRealTime()
    {
        IsRealTimeEnabled = !IsRealTimeEnabled;
        
        if (IsRealTimeEnabled)
        {
            _refreshTimer = new Timer(_ => _ = AutoRefreshAsync(), null, RefreshIntervalMs, RefreshIntervalMs);
        }
        else
        {
            _refreshTimer?.Dispose();
            _refreshTimer = null;
        }
        
        StateHasChanged();
    }

    private async Task ExecuteAction(ActivityActionModel action)
    {
        Logger.LogInformation("Executing activity action: {Action}", action.Label);
        
        switch (action.Type)
        {
            case "retry":
                // TODO: Implement retry logic
                break;
            case "view":
                // TODO: Navigate to detailed view
                break;
            case "download":
                // TODO: Implement download
                break;
            default:
                Logger.LogWarning("Unknown action type: {ActionType}", action.Type);
                break;
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Task.Delay(100); // Allow UI to update
            await feedScrollContainer.FocusAsync();
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Error scrolling to bottom");
        }
    }

    // Helper Methods
    private string GetActivityTypeClass(ActivityType type)
    {
        return type switch
        {
            ActivityType.Success => "success",
            ActivityType.Warning => "warning", 
            ActivityType.Error => "error",
            ActivityType.Info => "info",
            ActivityType.Processing => "processing",
            _ => "default"
        };
    }

    private string GetActivityIcon(ActivityType type)
    {
        return type switch
        {
            ActivityType.Success => "check-circle",
            ActivityType.Warning => "alert-triangle",
            ActivityType.Error => "x-circle",
            ActivityType.Info => "info",
            ActivityType.Processing => "cpu",
            _ => "circle"
        };
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var elapsed = DateTime.Now - timestamp;
        
        if (elapsed.TotalSeconds < 30)
            return "Just now";
        if (elapsed.TotalMinutes < 1)
            return $"{(int)elapsed.TotalSeconds}s ago";
        if (elapsed.TotalMinutes < 60)
            return $"{(int)elapsed.TotalMinutes}m ago";
        if (elapsed.TotalHours < 24)
            return $"{(int)elapsed.TotalHours}h ago";
        if (elapsed.TotalDays < 7)
            return $"{(int)elapsed.TotalDays}d ago";
        
        return timestamp.ToString("MMM dd, HH:mm");
    }

    // Mock Data Generation (replace with actual API calls)
    private async Task<List<ActivityItemModel>> GenerateMockActivityAsync(int page, int pageSize)
    {
        await Task.Delay(300); // Simulate API call
        
        var random = new Random();
        var items = new List<ActivityItemModel>();
        var types = Enum.GetValues<ActivityType>();
        
        var titles = new[]
        {
            "File processed successfully", "Classification completed", "File moved to library",
            "Processing failed", "New files discovered", "System backup completed",
            "ML model updated", "Configuration changed", "Queue cleared",
            "Error in file processing", "Network connection restored", "Storage cleanup completed"
        };
        
        var descriptions = new[]
        {
            "The.Office.S01E01.mkv has been successfully processed and moved to TV SERIES category",
            "Breaking.Bad.S05E16.mkv classification completed with 95% confidence",
            "Batch processing of 15 files completed in 2.3 seconds",
            "Failed to process corrupted.file.mkv due to invalid format",
            "Discovered 8 new video files in watch folder",
            "System performed routine maintenance and cleanup operations"
        };

        for (int i = 0; i < pageSize; i++)
        {
            var timestamp = DateTime.Now.AddMinutes(-(page * pageSize + i) * random.Next(1, 30));
            var type = types[random.Next(types.Length)];
            
            // Filter based on selected filter
            if (SelectedFilter != "all")
            {
                switch (SelectedFilter)
                {
                    case "files" when type != ActivityType.Success && type != ActivityType.Processing:
                        continue;
                    case "processing" when type != ActivityType.Processing:
                        continue;
                    case "errors" when type != ActivityType.Error && type != ActivityType.Warning:
                        continue;
                    case "system" when type != ActivityType.Info:
                        continue;
                }
            }
            
            var item = new ActivityItemModel
            {
                Id = Guid.NewGuid().ToString(),
                Type = type,
                Title = titles[random.Next(titles.Length)],
                Description = random.Next(3) == 0 ? descriptions[random.Next(descriptions.Length)] : null,
                Timestamp = timestamp,
                Details = random.Next(3) == 0 ? new List<KeyValuePair<string, string>>
                {
                    new("File", "example.mkv"),
                    new("Category", "TV SERIES"),
                    new("Duration", $"{random.Next(1, 10)}s")
                } : null,
                ErrorMessage = type == ActivityType.Error ? "System.IO.FileNotFoundException: Could not find file 'example.mkv'" : null,
                Actions = type == ActivityType.Error ? new List<ActivityActionModel>
                {
                    new() { Type = "retry", Label = "Retry", Icon = "refresh" },
                    new() { Type = "view", Label = "View Details", Icon = "eye" }
                } : null
            };
            
            items.Add(item);
        }
        
        return items.OrderByDescending(i => i.Timestamp).ToList();
    }

    public override void Dispose()
    {
        _refreshTimer?.Dispose();
        base.Dispose();
    }

    // Data Models
    private record ActivityItemModel
    {
        public string Id { get; init; } = string.Empty;
        public ActivityType Type { get; init; }
        public string Title { get; init; } = string.Empty;
        public string? Description { get; init; }
        public DateTime Timestamp { get; init; }
        public List<KeyValuePair<string, string>>? Details { get; init; }
        public string? ErrorMessage { get; init; }
        public List<ActivityActionModel>? Actions { get; init; }
    }

    private record ActivityActionModel
    {
        public string Type { get; init; } = string.Empty;
        public string Label { get; init; } = string.Empty;
        public string Icon { get; init; } = string.Empty;
    }

    private enum ActivityType
    {
        Info,
        Success,
        Warning,
        Error,
        Processing
    }
}

<style>
    .activity-feed-container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .feed-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-4);
        padding-bottom: var(--space-4);
        border-bottom: 1px solid var(--border-color);
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: var(--space-3);
    }

    .header-title h2 {
        margin: 0;
        font-size: var(--text-2xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
    }

    .header-subtitle {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        font-weight: var(--font-normal);
    }

    .feed-controls {
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    .filter-select {
        padding: var(--space-2) var(--space-3);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        background: var(--background-elevated);
        color: var(--text-primary);
        font-size: var(--text-sm);
    }

    .feed-content {
        flex: 1;
        overflow-y: auto;
        margin-bottom: var(--space-4);
        max-height: 600px;
    }

    /* Activity Timeline */
    .activity-timeline {
        display: flex;
        flex-direction: column;
        gap: var(--space-1);
        padding: var(--space-2) 0;
    }

    .activity-item {
        display: flex;
        gap: var(--space-3);
        padding: var(--space-3);
        border-radius: var(--radius-lg);
        transition: all 0.2s ease;
        position: relative;
    }

    .activity-item:hover {
        background: var(--background-elevated);
    }

    .activity-item.success { --item-color: var(--success-color); }
    .activity-item.warning { --item-color: var(--warning-color); }
    .activity-item.error { --item-color: var(--error-color); }
    .activity-item.info { --item-color: var(--primary-color); }
    .activity-item.processing { --item-color: var(--secondary-color); }
    .activity-item.default { --item-color: var(--text-secondary); }

    .activity-indicator {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-width: 32px;
    }

    .activity-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: var(--item-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: var(--shadow-sm);
        flex-shrink: 0;
        z-index: 1;
    }

    .activity-line {
        width: 2px;
        flex: 1;
        background: var(--border-color);
        margin-top: var(--space-2);
        min-height: 20px;
    }

    .activity-item:last-child .activity-line {
        display: none;
    }

    .activity-content {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .activity-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        gap: var(--space-2);
    }

    .activity-title {
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        line-height: 1.4;
    }

    .activity-time {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        white-space: nowrap;
        flex-shrink: 0;
    }

    .activity-description {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        line-height: 1.4;
    }

    .activity-details {
        display: flex;
        flex-direction: column;
        gap: var(--space-1);
        padding: var(--space-2);
        background: var(--background-subtle);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
    }

    .detail-item {
        display: flex;
        gap: var(--space-2);
    }

    .detail-key {
        font-weight: var(--font-medium);
        color: var(--text-secondary);
        min-width: 80px;
    }

    .detail-value {
        color: var(--text-primary);
        font-family: var(--font-mono);
    }

    .activity-error {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .error-toggle {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        background: none;
        border: none;
        color: var(--error-color);
        font-size: var(--text-sm);
        cursor: pointer;
        padding: var(--space-1) 0;
    }

    .error-toggle:hover {
        text-decoration: underline;
    }

    .error-details {
        padding: var(--space-3);
        background: var(--background-elevated);
        border: 1px solid var(--error-color);
        border-radius: var(--radius-md);
        max-height: 200px;
        overflow-y: auto;
    }

    .error-details pre {
        font-family: var(--font-mono);
        font-size: var(--text-sm);
        color: var(--error-color);
        margin: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }

    .activity-actions {
        display: flex;
        gap: var(--space-2);
        flex-wrap: wrap;
    }

    .action-btn {
        display: flex;
        align-items: center;
        gap: var(--space-1);
        padding: var(--space-1) var(--space-2);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-sm);
        background: var(--background);
        color: var(--text-secondary);
        font-size: var(--text-sm);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .action-btn:hover {
        background: var(--background-elevated);
        color: var(--text-primary);
    }

    .action-btn.retry:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }

    .action-btn.view:hover {
        border-color: var(--secondary-color);
        color: var(--secondary-color);
    }

    /* Load More */
    .load-more-container {
        display: flex;
        justify-content: center;
        padding: var(--space-4);
    }

    /* Empty State */
    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--space-8);
        text-align: center;
        gap: var(--space-3);
    }

    .empty-state h3 {
        margin: 0;
        color: var(--text-primary);
    }

    .empty-state p {
        color: var(--text-secondary);
        margin: 0;
    }

    /* Live Status Bar */
    .live-status-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-3);
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
        margin-top: auto;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        color: var(--success-color);
        font-weight: var(--font-medium);
    }

    .live-dot {
        width: 8px;
        height: 8px;
        background: var(--success-color);
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    .activity-stats {
        color: var(--text-secondary);
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.3; }
        100% { opacity: 1; }
    }

    /* Loading and Error States */
    .loading-container,
    .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--space-8);
        text-align: center;
        gap: var(--space-3);
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .feed-header {
            flex-direction: column;
            gap: var(--space-3);
            align-items: stretch;
        }

        .feed-controls {
            justify-content: space-between;
        }

        .activity-item {
            padding: var(--space-2);
        }

        .activity-header {
            flex-direction: column;
            align-items: stretch;
            gap: var(--space-1);
        }

        .activity-time {
            align-self: flex-start;
            font-size: var(--text-xs);
        }

        .activity-actions {
            justify-content: flex-start;
        }

        .live-status-bar {
            flex-direction: column;
            gap: var(--space-2);
            text-align: center;
        }

        .feed-content {
            max-height: 400px;
        }
    }

    /* Small mobile adjustments */
    @@media (max-width: 480px) {
        .activity-indicator {
            min-width: 28px;
        }

        .activity-icon {
            width: 28px;
            height: 28px;
        }

        .detail-item {
            flex-direction: column;
            gap: var(--space-1);
        }

        .detail-key {
            min-width: auto;
        }
    }
</style>