@using MediaButler.Web.Models
@* @using MediaButler.Web.Services.Files *@
@using MediaButler.Web.Services.System
@inherits MediaButler.Web.Components.Base.MediaButlerComponentBase

<div class="processing-queue-container">
    <div class="queue-header">
        <div class="header-title">
            <Icon Name="cpu" CssClass="large primary-color" />
            <div>
                <h2>Processing Queue</h2>
                <span class="header-subtitle">Real-time processing status</span>
            </div>
        </div>
        <div class="queue-controls">
            <button class="btn btn-ghost" @onclick="RefreshQueueAsync" disabled="@IsLoading">
                <Icon Name="refresh" CssClass="small" />
                Refresh
            </button>
            <button class="btn btn-secondary" @onclick="TogglePause" disabled="@IsLoading">
                <Icon Name="@(IsPaused ? "play" : "pause")" CssClass="small" />
                @(IsPaused ? "Resume" : "Pause")
            </button>
        </div>
    </div>

    @if (IsLoading && _queueData == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Loading processing queue...</p>
        </div>
    }
    else if (HasError)
    {
        <div class="error-container">
            <Icon Name="warning" CssClass="large error-color" />
            <h3>Error Loading Queue</h3>
            <p>@ErrorMessage</p>
            <button class="btn btn-primary" @onclick="RefreshQueueAsync">
                <Icon Name="refresh" CssClass="small" />
                Retry
            </button>
        </div>
    }
    else
    {
        <div class="queue-content">
            <!-- Queue Statistics -->
            <div class="queue-stats">
                <div class="stat-item">
                    <div class="stat-value">@(_queueData?.QueueSize ?? 0)</div>
                    <div class="stat-label">In Queue</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value processing">@(_queueData?.ActiveJobs ?? 0)</div>
                    <div class="stat-label">Processing</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value success">@(_queueData?.CompletedToday ?? 0)</div>
                    <div class="stat-label">Completed Today</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">@GetAvgProcessingTime()</div>
                    <div class="stat-label">Avg Time</div>
                </div>
            </div>

            <!-- Queue Progress Bar -->
            @if ((_queueData?.QueueSize ?? 0) > 0 || (_queueData?.ActiveJobs ?? 0) > 0)
            {
                <div class="queue-progress-section">
                    <div class="progress-header">
                        <span>Processing Progress</span>
                        <span class="progress-percentage">@GetProgressPercentage()%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @GetProgressPercentage()%"></div>
                    </div>
                    <div class="progress-labels">
                        <span>@(_queueData?.ActiveJobs ?? 0) active</span>
                        <span>@(_queueData?.QueueSize ?? 0) queued</span>
                    </div>
                </div>
            }

            <!-- Active Jobs List -->
            @if (ActiveJobs?.Any() == true)
            {
                <div class="active-jobs-section">
                    <h3>
                        <Icon Name="play" CssClass="small processing" />
                        Active Jobs
                    </h3>
                    <div class="jobs-list">
                        @foreach (var job in ActiveJobs.Take(5))
                        {
                            <div class="job-item active">
                                <div class="job-info">
                                    <div class="job-filename">@job.Filename</div>
                                    <div class="job-details">
                                        <span class="job-stage">@job.CurrentStage</span>
                                        <span class="job-duration">@GetJobDuration(job.StartTime)</span>
                                    </div>
                                </div>
                                <div class="job-progress">
                                    <div class="job-progress-bar">
                                        <div class="job-progress-fill" style="width: @job.ProgressPercentage%"></div>
                                    </div>
                                    <span class="job-percentage">@job.ProgressPercentage%</span>
                                </div>
                                <div class="job-actions">
                                    <button class="btn-icon" @onclick="() => PauseJob(job.Id)" title="Pause job">
                                        <Icon Name="pause" CssClass="small" />
                                    </button>
                                    <button class="btn-icon error" @onclick="() => CancelJob(job.Id)" title="Cancel job">
                                        <Icon Name="x" CssClass="small" />
                                    </button>
                                </div>
                            </div>
                        }
                        @if (ActiveJobs.Count > 5)
                        {
                            <div class="more-jobs">
                                <span>... and @(ActiveJobs.Count - 5) more active jobs</span>
                                <button class="btn btn-ghost" @onclick="ShowAllActiveJobs">View All</button>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Queued Jobs Preview -->
            @if (QueuedJobs?.Any() == true)
            {
                <div class="queued-jobs-section">
                    <h3>
                        <Icon Name="clock" CssClass="small secondary-color" />
                        Queued Jobs
                    </h3>
                    <div class="jobs-list">
                        @foreach (var job in QueuedJobs.Take(3))
                        {
                            <div class="job-item queued">
                                <div class="job-info">
                                    <div class="job-filename">@job.Filename</div>
                                    <div class="job-details">
                                        <span class="job-priority priority-@job.Priority.ToString().ToLower()">@job.Priority Priority</span>
                                        <span class="job-queued-time">Queued @GetRelativeTime(job.QueuedTime)</span>
                                    </div>
                                </div>
                                <div class="job-actions">
                                    <button class="btn-icon" @onclick="() => BoostJob(job.Id)" title="Boost priority">
                                        <Icon Name="arrow-up" CssClass="small" />
                                    </button>
                                    <button class="btn-icon error" @onclick="() => RemoveFromQueue(job.Id)" title="Remove from queue">
                                        <Icon Name="x" CssClass="small" />
                                    </button>
                                </div>
                            </div>
                        }
                        @if (QueuedJobs.Count > 3)
                        {
                            <div class="more-jobs">
                                <span>... and @(QueuedJobs.Count - 3) more queued jobs</span>
                                <button class="btn btn-ghost" @onclick="ShowAllQueuedJobs">View All</button>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Empty State -->
            @if ((_queueData?.QueueSize ?? 0) == 0 && (_queueData?.ActiveJobs ?? 0) == 0)
            {
                <div class="empty-state">
                    <Icon Name="check-circle" CssClass="large success-color" />
                    <h3>Queue is Empty</h3>
                    <p>All jobs have been processed successfully.</p>
                    <div class="empty-actions">
                        <button class="btn btn-primary" @onclick="StartNewScan">
                            <Icon Name="search" CssClass="small" />
                            Start New Scan
                        </button>
                    </div>
                </div>
            }

            <!-- Last Updated -->
            <div class="queue-footer">
                <span class="last-updated">
                    <Icon Name="refresh" CssClass="small" />
                    Last updated: @GetLastUpdatedDisplay()
                </span>
                @if (IsAutoRefresh)
                {
                    <span class="auto-refresh-indicator">
                        <div class="pulse-dot"></div>
                        Auto-refresh enabled
                    </span>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public bool IsAutoRefresh { get; set; } = true;
    [Parameter] public int RefreshIntervalMs { get; set; } = 5000; // 5 seconds for queue updates

    [Inject] private ISystemStatusService SystemStatusService { get; set; } = default!;
    @* [Inject] private IFileManagementService FileManagementService { get; set; } = default!; *@

    private ProcessingQueueStatus? _queueData;
    private List<ActiveJobModel> ActiveJobs { get; set; } = new();
    private List<QueuedJobModel> QueuedJobs { get; set; } = new();
    private DateTime _lastUpdated = DateTime.Now;
    private Timer? _refreshTimer;
    private bool IsPaused { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshQueueAsync();

        if (IsAutoRefresh)
        {
            _refreshTimer = new Timer(_ => _ = AutoRefreshAsync(), null, RefreshIntervalMs, RefreshIntervalMs);
        }
    }

    private async Task RefreshQueueAsync()
    {
        await ExecuteAsync(async () =>
        {
            _queueData = await SystemStatusService.GetProcessingQueueStatusAsync();
            
            // Simulate fetching active and queued jobs (replace with actual API calls)
            ActiveJobs = await GetActiveJobsAsync();
            QueuedJobs = await GetQueuedJobsAsync();
            
            _lastUpdated = DateTime.Now;
            StateHasChanged();
        }, "Refreshing processing queue");
    }

    private async Task AutoRefreshAsync()
    {
        if (!IsPaused)
        {
            try
            {
                await InvokeAsync(RefreshQueueAsync);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error during auto-refresh");
            }
        }
    }

    // Job Management Methods
    private async Task TogglePause()
    {
        IsPaused = !IsPaused;
        // TODO: Implement actual pause/resume logic with API
        await Task.Delay(100); // Simulate API call
        StateHasChanged();
    }

    private async Task PauseJob(string jobId)
    {
        // TODO: Implement job pause logic
        Logger.LogInformation("Pausing job {JobId}", jobId);
        await RefreshQueueAsync();
    }

    private async Task CancelJob(string jobId)
    {
        // TODO: Implement job cancellation logic
        Logger.LogInformation("Cancelling job {JobId}", jobId);
        await RefreshQueueAsync();
    }

    private async Task BoostJob(string jobId)
    {
        // TODO: Implement priority boost logic
        Logger.LogInformation("Boosting job priority {JobId}", jobId);
        await RefreshQueueAsync();
    }

    private async Task RemoveFromQueue(string jobId)
    {
        // TODO: Implement queue removal logic
        Logger.LogInformation("Removing job from queue {JobId}", jobId);
        await RefreshQueueAsync();
    }

    private async Task StartNewScan()
    {
        // TODO: Implement new scan initiation
        Logger.LogInformation("Starting new file scan");
        await RefreshQueueAsync();
    }

    private async Task ShowAllActiveJobs()
    {
        // TODO: Navigate to detailed jobs view
        Logger.LogInformation("Showing all active jobs");
    }

    private async Task ShowAllQueuedJobs()
    {
        // TODO: Navigate to detailed queue view
        Logger.LogInformation("Showing all queued jobs");
    }

    // Helper Methods
    private string GetAvgProcessingTime()
    {
        var avgMs = _queueData?.AvgProcessingTimeMs ?? 0;
        if (avgMs >= 1000)
            return $"{avgMs / 1000:F1}s";
        return $"{avgMs}ms";
    }

    private int GetProgressPercentage()
    {
        var total = (_queueData?.QueueSize ?? 0) + (_queueData?.ActiveJobs ?? 0);
        if (total == 0) return 100;
        
        var completed = _queueData?.CompletedToday ?? 0;
        return Math.Min(100, (int)((completed * 100.0) / (completed + total)));
    }

    private string GetJobDuration(DateTime startTime)
    {
        var duration = DateTime.Now - startTime;
        if (duration.TotalMinutes < 1)
            return $"{(int)duration.TotalSeconds}s";
        if (duration.TotalHours < 1)
            return $"{(int)duration.TotalMinutes}m";
        return $"{(int)duration.TotalHours}h {duration.Minutes}m";
    }

    private string GetRelativeTime(DateTime time)
    {
        var elapsed = DateTime.Now - time;
        if (elapsed.TotalMinutes < 1)
            return "just now";
        if (elapsed.TotalMinutes < 60)
            return $"{(int)elapsed.TotalMinutes}m ago";
        if (elapsed.TotalHours < 24)
            return $"{(int)elapsed.TotalHours}h ago";
        return $"{(int)elapsed.TotalDays}d ago";
    }

    private string GetLastUpdatedDisplay()
    {
        var elapsed = DateTime.Now - _lastUpdated;
        if (elapsed.TotalSeconds < 30)
            return "just now";
        if (elapsed.TotalMinutes < 1)
            return $"{(int)elapsed.TotalSeconds}s ago";
        if (elapsed.TotalMinutes < 60)
            return $"{(int)elapsed.TotalMinutes}m ago";
        return $"{(int)elapsed.TotalHours}h ago";
    }

    // Mock data generation (replace with actual API calls)
    private async Task<List<ActiveJobModel>> GetActiveJobsAsync()
    {
        // TODO: Replace with actual API call
        await Task.Delay(50);
        return new List<ActiveJobModel>();
    }

    private async Task<List<QueuedJobModel>> GetQueuedJobsAsync()
    {
        // TODO: Replace with actual API call  
        await Task.Delay(50);
        return new List<QueuedJobModel>();
    }

    public override void Dispose()
    {
        _refreshTimer?.Dispose();
        base.Dispose();
    }

    // Job Data Models
    public record ActiveJobModel
    {
        public string Id { get; init; } = string.Empty;
        public string Filename { get; init; } = string.Empty;
        public string CurrentStage { get; init; } = string.Empty;
        public int ProgressPercentage { get; init; }
        public DateTime StartTime { get; init; } = DateTime.Now;
    }

    public record QueuedJobModel
    {
        public string Id { get; init; } = string.Empty;
        public string Filename { get; init; } = string.Empty;
        public JobPriority Priority { get; init; } = JobPriority.Normal;
        public DateTime QueuedTime { get; init; } = DateTime.Now;
    }

    public enum JobPriority
    {
        Low,
        Normal,
        High,
        Critical
    }
}

<style>
    .processing-queue-container {
        width: 100%;
        max-width: 1000px;
        margin: 0 auto;
    }

    .queue-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-6);
        padding-bottom: var(--space-4);
        border-bottom: 1px solid var(--border-color);
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: var(--space-3);
    }

    .header-title h2 {
        margin: 0;
        font-size: var(--text-2xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
    }

    .header-subtitle {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        font-weight: var(--font-normal);
    }

    .queue-controls {
        display: flex;
        gap: var(--space-2);
    }

    .queue-content {
        display: flex;
        flex-direction: column;
        gap: var(--space-6);
    }

    /* Queue Statistics */
    .queue-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: var(--space-4);
        padding: var(--space-4);
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: var(--text-2xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
        margin-bottom: var(--space-1);
    }

    .stat-value.processing { color: var(--primary-color); }
    .stat-value.success { color: var(--success-color); }

    .stat-label {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        font-weight: var(--font-medium);
    }

    /* Progress Section */
    .queue-progress-section {
        padding: var(--space-4);
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
    }

    .progress-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-2);
        font-weight: var(--font-medium);
    }

    .progress-percentage {
        color: var(--primary-color);
        font-weight: var(--font-bold);
    }

    .progress-bar {
        height: 12px;
        background: var(--background-subtle);
        border-radius: var(--radius-full);
        overflow: hidden;
        margin-bottom: var(--space-2);
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-color), var(--primary-600));
        border-radius: var(--radius-full);
        transition: width 0.5s ease;
    }

    .progress-labels {
        display: flex;
        justify-content: space-between;
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    /* Jobs Lists */
    .active-jobs-section,
    .queued-jobs-section {
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
    }

    .active-jobs-section h3,
    .queued-jobs-section h3 {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        margin: 0 0 var(--space-4) 0;
        font-size: var(--text-lg);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
    }

    .jobs-list {
        display: flex;
        flex-direction: column;
        gap: var(--space-3);
    }

    .job-item {
        display: flex;
        align-items: center;
        gap: var(--space-3);
        padding: var(--space-3);
        background: var(--background);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        transition: all 0.2s ease;
    }

    .job-item:hover {
        box-shadow: var(--shadow-sm);
    }

    .job-item.active {
        border-left: 4px solid var(--primary-color);
    }

    .job-item.queued {
        border-left: 4px solid var(--secondary-color);
    }

    .job-info {
        flex: 1;
        min-width: 0;
    }

    .job-filename {
        font-weight: var(--font-medium);
        color: var(--text-primary);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        margin-bottom: var(--space-1);
    }

    .job-details {
        display: flex;
        gap: var(--space-3);
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    .job-stage {
        color: var(--primary-color);
        font-weight: var(--font-medium);
    }

    .job-priority {
        padding: 2px 8px;
        border-radius: var(--radius-sm);
        font-size: var(--text-xs);
        font-weight: var(--font-medium);
        text-transform: uppercase;
    }

    .priority-low { background: var(--gray-100); color: var(--gray-700); }
    .priority-normal { background: var(--blue-100); color: var(--blue-700); }
    .priority-high { background: var(--orange-100); color: var(--orange-700); }
    .priority-critical { background: var(--red-100); color: var(--red-700); }

    .job-progress {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        min-width: 120px;
    }

    .job-progress-bar {
        height: 6px;
        width: 80px;
        background: var(--background-subtle);
        border-radius: var(--radius-full);
        overflow: hidden;
    }

    .job-progress-fill {
        height: 100%;
        background: var(--primary-color);
        border-radius: var(--radius-full);
        transition: width 0.3s ease;
    }

    .job-percentage {
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
        color: var(--text-secondary);
        min-width: 35px;
    }

    .job-actions {
        display: flex;
        gap: var(--space-1);
    }

    .btn-icon {
        padding: var(--space-2);
        background: none;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-icon:hover {
        background: var(--background-subtle);
        color: var(--text-primary);
    }

    .btn-icon.error:hover {
        background: var(--error-color);
        color: white;
        border-color: var(--error-color);
    }

    .more-jobs {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-2);
        font-size: var(--text-sm);
        color: var(--text-secondary);
        border: 1px dashed var(--border-color);
        border-radius: var(--radius-md);
    }

    /* Empty State */
    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--space-8);
        text-align: center;
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
    }

    .empty-state h3 {
        margin: var(--space-4) 0 var(--space-2) 0;
        color: var(--text-primary);
    }

    .empty-state p {
        color: var(--text-secondary);
        margin-bottom: var(--space-4);
    }

    .empty-actions {
        display: flex;
        gap: var(--space-2);
    }

    /* Footer */
    .queue-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-3);
        background: var(--background-subtle);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    .last-updated {
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    .auto-refresh-indicator {
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    .pulse-dot {
        width: 8px;
        height: 8px;
        background: var(--success-color);
        border-radius: 50%;
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.3; }
        100% { opacity: 1; }
    }

    /* Loading and Error States */
    .loading-container,
    .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--space-8);
        text-align: center;
        gap: var(--space-3);
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .queue-header {
            flex-direction: column;
            gap: var(--space-3);
            align-items: stretch;
        }

        .queue-stats {
            grid-template-columns: repeat(2, 1fr);
            gap: var(--space-3);
        }

        .job-item {
            flex-direction: column;
            align-items: stretch;
            gap: var(--space-2);
        }

        .job-progress {
            min-width: auto;
            justify-content: space-between;
        }

        .more-jobs {
            flex-direction: column;
            gap: var(--space-2);
            text-align: center;
        }

        .queue-footer {
            flex-direction: column;
            gap: var(--space-2);
            text-align: center;
        }
    }
</style>