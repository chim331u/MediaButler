@namespace MediaButler.Web.Components.UI
@inject INotificationService NotificationService
@implements IDisposable

<div class="notification-container @Position.ToString().ToLower()">
    @foreach (var notification in visibleNotifications.Values)
    {
        <NotificationToast
            Title="@notification.Title"
            Message="@notification.Message"
            NotificationType="@notification.Level"
            Duration="@notification.Duration"
            IsVisible="true"
            OnDismissed="@(() => RemoveNotification(notification.Id))" />
    }
</div>

@code {
    [Parameter] public NotificationPosition Position { get; set; } = NotificationPosition.TopRight;
    [Parameter] public int MaxNotifications { get; set; } = 5;

    private readonly Dictionary<string, NotificationItem> visibleNotifications = new();

    protected override void OnInitialized()
    {
        NotificationService.NotificationAdded += OnNotificationAdded;
        NotificationService.NotificationRemoved += OnNotificationRemoved;
        NotificationService.NotificationsCleared += OnNotificationsCleared;
    }

    private void OnNotificationAdded(NotificationItem notification)
    {
        InvokeAsync(() =>
        {
            // Ensure we don't exceed max notifications
            while (visibleNotifications.Count >= MaxNotifications)
            {
                var oldestKey = visibleNotifications.Keys.First();
                visibleNotifications.Remove(oldestKey);
            }

            visibleNotifications[notification.Id] = notification;
            StateHasChanged();
        });
    }

    private void OnNotificationRemoved(string notificationId)
    {
        InvokeAsync(() =>
        {
            if (visibleNotifications.ContainsKey(notificationId))
            {
                visibleNotifications.Remove(notificationId);
                StateHasChanged();
            }
        });
    }

    private void OnNotificationsCleared()
    {
        InvokeAsync(() =>
        {
            visibleNotifications.Clear();
            StateHasChanged();
        });
    }

    private void RemoveNotification(string notificationId)
    {
        if (visibleNotifications.ContainsKey(notificationId))
        {
            visibleNotifications.Remove(notificationId);
            StateHasChanged();
        }
    }

    public enum NotificationPosition
    {
        TopLeft,
        TopRight,
        BottomLeft,
        BottomRight
    }

    public void Dispose()
    {
        NotificationService.NotificationAdded -= OnNotificationAdded;
        NotificationService.NotificationRemoved -= OnNotificationRemoved;
        NotificationService.NotificationsCleared -= OnNotificationsCleared;
    }
}

<style>
    .notification-container {
        position: fixed;
        z-index: var(--z-tooltip);
        max-width: 400px;
        width: 100%;
        padding: var(--space-4);
        pointer-events: none;
    }

    .notification-container > * {
        pointer-events: auto;
    }

    .notification-container.topleft {
        top: 0;
        left: 0;
    }

    .notification-container.topright {
        top: 0;
        right: 0;
    }

    .notification-container.bottomleft {
        bottom: 0;
        left: 0;
    }

    .notification-container.bottomright {
        bottom: 0;
        right: 0;
    }

    /* Mobile responsive */
    @@media (max-width: 768px) {
        .notification-container {
            left: var(--space-2);
            right: var(--space-2);
            max-width: none;
            width: auto;
        }

        .notification-container.topleft,
        .notification-container.topright {
            top: var(--space-2);
        }

        .notification-container.bottomleft,
        .notification-container.bottomright {
            bottom: var(--space-2);
        }
    }
</style>