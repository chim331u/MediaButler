@namespace MediaButler.Web.Components.UI
@inject NavigationManager Navigation
@implements IDisposable

<nav class="breadcrumb" aria-label="Breadcrumb navigation">
    <ol class="breadcrumb-list">
        @foreach (var (item, index) in breadcrumbItems.Select((item, index) => (item, index)))
        {
            <li class="breadcrumb-item @(index == breadcrumbItems.Count - 1 ? "active" : "")">
                @if (index == breadcrumbItems.Count - 1)
                {
                    <span class="breadcrumb-current" aria-current="page">
                        <Icon Name="@item.Icon" CssClass="breadcrumb-icon small" />
                        @item.Title
                    </span>
                }
                else
                {
                    <a href="@item.Url" class="breadcrumb-link">
                        <Icon Name="@item.Icon" CssClass="breadcrumb-icon small" />
                        @item.Title
                    </a>
                    <Icon Name="next" CssClass="breadcrumb-separator small" />
                }
            </li>
        }
    </ol>
</nav>

@code {
    private List<BreadcrumbItem> breadcrumbItems = new();
    private string currentUrl = string.Empty;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
        UpdateBreadcrumbs();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateBreadcrumbs();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateBreadcrumbs()
    {
        currentUrl = Navigation.Uri;
        var uri = new Uri(currentUrl);
        var path = uri.LocalPath.TrimStart('/').ToLowerInvariant();
        
        breadcrumbItems = new List<BreadcrumbItem>
        {
            new("Dashboard", "/", "dashboard")
        };

        if (!string.IsNullOrEmpty(path) && path != "/")
        {
            var segments = path.Split('/', StringSplitOptions.RemoveEmptyEntries);
            var currentPath = "";

            foreach (var segment in segments)
            {
                currentPath += "/" + segment;
                var (title, icon) = GetBreadcrumbInfo(segment);
                breadcrumbItems.Add(new BreadcrumbItem(title, currentPath, icon));
            }
        }
    }

    private (string Title, string Icon) GetBreadcrumbInfo(string segment)
    {
        return segment.ToLowerInvariant() switch
        {
            "files" => ("Files", "files"),
            "pending" => ("Pending Review", "pending"),
            "stats" => ("Statistics", "statistics"),
            "settings" => ("Settings", "settings"),
            _ => (FormatSegment(segment), "next")
        };
    }

    private string FormatSegment(string segment)
    {
        // Convert kebab-case or snake_case to Title Case
        return string.Join(" ", segment.Split(new[] { '-', '_' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(word => char.ToUpperInvariant(word[0]) + word[1..].ToLowerInvariant()));
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private record BreadcrumbItem(string Title, string Url, string Icon);
}

<style>
    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
    }

    .breadcrumb-list {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: var(--space-1);
        list-style: none;
        margin: 0;
        padding: 0;
        font-size: var(--font-size-sm);
    }

    .breadcrumb-item {
        display: flex;
        align-items: center;
        gap: var(--space-1);
    }

    .breadcrumb-link {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        color: var(--gray-600);
        text-decoration: none;
        padding: var(--space-1) var(--space-2);
        border-radius: var(--radius-base);
        transition: all var(--transition-fast);
        font-weight: var(--font-weight-medium);
    }

    .breadcrumb-link:hover {
        color: var(--primary-color);
        background: var(--gray-100);
        text-decoration: none;
    }

    .breadcrumb-current {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        color: var(--gray-900);
        font-weight: var(--font-weight-semibold);
        padding: var(--space-1) var(--space-2);
    }

    .breadcrumb-icon {
        flex-shrink: 0;
    }

    .breadcrumb-separator {
        color: var(--gray-400);
        margin: 0 var(--space-1);
    }

    /* Dark theme support */
    [data-theme="dark"] .breadcrumb-link {
        color: var(--gray-400);
    }

    [data-theme="dark"] .breadcrumb-link:hover {
        color: var(--primary-400);
        background: var(--gray-800);
    }

    [data-theme="dark"] .breadcrumb-current {
        color: var(--gray-200);
    }

    [data-theme="dark"] .breadcrumb-separator {
        color: var(--gray-600);
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .breadcrumb-list {
            font-size: var(--font-size-xs);
            gap: 2px;
        }

        .breadcrumb-link,
        .breadcrumb-current {
            padding: var(--space-1);
            gap: var(--space-1);
        }

        .breadcrumb-separator {
            margin: 0;
        }

        /* Hide intermediate breadcrumbs on very small screens */
        .breadcrumb-item:not(:first-child):not(:last-child) {
            display: none;
        }

        /* Show ellipsis if there are hidden items */
        .breadcrumb-item:first-child:not(:last-child)::after {
            content: "...";
            color: var(--gray-400);
            margin: 0 var(--space-1);
        }
    }

    /* Accessibility improvements */
    .breadcrumb-link:focus {
        outline: 2px solid var(--primary-color);
        outline-offset: 2px;
    }
</style>