@namespace MediaButler.Web.Components.UI
@inject IConnectionManager ConnectionManager
@inject INotificationService NotificationService
@implements IDisposable

<div class="connection-status @ConnectionManager.Health.ToString().ToLower() @CssClass">
    <div class="status-indicator">
        <Icon Name="@GetStatusIcon()" CssClass="status-icon small" />
        
        @if (ShowLabel)
        {
            <span class="status-text">@GetStatusText()</span>
        }
    </div>
    
    @if (ShowDetails && ConnectionManager.Health != ConnectionHealth.Healthy)
    {
        <div class="status-actions">
            @if (ConnectionManager.Health == ConnectionHealth.Offline)
            {
                <button class="reconnect-btn" @onclick="HandleReconnect" disabled="@isReconnecting">
                    @if (isReconnecting)
                    {
                        <LoadingSpinner Size="LoadingSpinner.SpinnerSize.Small" ShowText="false" />
                    }
                    else
                    {
                        <Icon Name="refresh" CssClass="small" />
                    }
                    <span>@(isReconnecting ? "Reconnecting..." : "Reconnect")</span>
                </button>
            }
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] public bool ShowDetails { get; set; } = true;
    [Parameter] public bool ShowNotifications { get; set; } = true;
    [Parameter] public string CssClass { get; set; } = "";

    private bool isReconnecting = false;
    private ConnectionHealth previousHealth = ConnectionHealth.Offline;

    protected override void OnInitialized()
    {
        ConnectionManager.HealthChanged += OnHealthChanged;
        previousHealth = ConnectionManager.Health;
    }

    private void OnHealthChanged(ConnectionHealth newHealth)
    {
        InvokeAsync(() =>
        {
            // Show notifications for health changes if enabled
            if (ShowNotifications && previousHealth != newHealth)
            {
                ShowHealthNotification(newHealth, previousHealth);
            }

            previousHealth = newHealth;

            // Reset reconnecting state when connection is restored
            if (newHealth == ConnectionHealth.Healthy && isReconnecting)
            {
                isReconnecting = false;
            }

            StateHasChanged();
        });
    }

    private async Task HandleReconnect()
    {
        if (isReconnecting) return;

        try
        {
            isReconnecting = true;
            StateHasChanged();

            await ConnectionManager.ReconnectAsync();

            if (ShowNotifications)
            {
                NotificationService.ShowInfo("Reconnection", "Attempting to reconnect...");
            }
        }
        catch (Exception ex)
        {
            if (ShowNotifications)
            {
                NotificationService.ShowError("Reconnection Failed", ex.Message);
            }
        }
        finally
        {
            isReconnecting = false;
            StateHasChanged();
        }
    }

    private void ShowHealthNotification(ConnectionHealth newHealth, ConnectionHealth oldHealth)
    {
        switch (newHealth)
        {
            case ConnectionHealth.Healthy:
                if (oldHealth != ConnectionHealth.Healthy)
                {
                    NotificationService.ShowSuccess("Connected", "Real-time updates are now available");
                }
                break;

            case ConnectionHealth.Offline:
                NotificationService.ShowError("Connection Lost", "Real-time updates are not available");
                break;

            case ConnectionHealth.Reconnecting:
                NotificationService.ShowWarning("Reconnecting", "Attempting to restore connection...");
                break;

            case ConnectionHealth.Degraded:
                NotificationService.ShowWarning("Connection Issues", "Experiencing connectivity problems");
                break;
        }
    }

    private string GetStatusIcon()
    {
        return ConnectionManager.Health switch
        {
            ConnectionHealth.Healthy => "health",
            ConnectionHealth.Reconnecting => "processing",
            ConnectionHealth.Degraded => "warning",
            ConnectionHealth.Offline => "error",
            _ => "error"
        };
    }

    private string GetStatusText()
    {
        return ConnectionManager.Health switch
        {
            ConnectionHealth.Healthy => "Connected",
            ConnectionHealth.Reconnecting => "Reconnecting",
            ConnectionHealth.Degraded => "Connection Issues",
            ConnectionHealth.Offline => "Offline",
            _ => "Unknown"
        };
    }

    public void Dispose()
    {
        ConnectionManager.HealthChanged -= OnHealthChanged;
    }
}

<style>
    .connection-status {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        padding: var(--space-2) var(--space-3);
        border-radius: var(--radius-md);
        font-size: var(--font-size-sm);
        transition: all var(--transition-fast);
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    .status-text {
        font-weight: var(--font-weight-medium);
        white-space: nowrap;
    }

    .status-actions {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        margin-left: var(--space-2);
    }

    .reconnect-btn {
        display: flex;
        align-items: center;
        gap: var(--space-1);
        padding: var(--space-1) var(--space-2);
        background: none;
        border: 1px solid currentColor;
        border-radius: var(--radius-base);
        color: inherit;
        font-size: var(--font-size-xs);
        cursor: pointer;
        transition: all var(--transition-fast);
    }

    .reconnect-btn:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.1);
    }

    .reconnect-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    /* Health-specific styling */
    .connection-status.healthy {
        background: var(--success-color);
        color: white;
    }

    .connection-status.reconnecting {
        background: var(--warning-color);
        color: white;
    }

    .connection-status.degraded {
        background: var(--warning-color);
        color: white;
    }

    .connection-status.offline {
        background: var(--error-color);
        color: white;
    }

    /* Compact variant */
    .connection-status.compact {
        padding: var(--space-1) var(--space-2);
    }

    .connection-status.compact .status-text {
        font-size: var(--font-size-xs);
    }

    /* Minimal variant (icon only) */
    .connection-status.minimal {
        background: transparent;
        padding: var(--space-1);
    }

    .connection-status.minimal.healthy {
        color: var(--success-color);
    }

    .connection-status.minimal.reconnecting {
        color: var(--warning-color);
    }

    .connection-status.minimal.degraded {
        color: var(--warning-color);
    }

    .connection-status.minimal.offline {
        color: var(--error-color);
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .connection-status .status-text {
            display: none;
        }

        .connection-status .status-actions {
            margin-left: 0;
        }

        .reconnect-btn span {
            display: none;
        }
    }
</style>