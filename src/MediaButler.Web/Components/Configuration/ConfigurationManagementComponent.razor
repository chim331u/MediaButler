@using MediaButler.Web.Models.Configuration
@using MediaButler.Web.Services.Configuration
@using MediaButler.Web.Components.Base
@inherits MediaButlerComponentBase
@inject IConfigurationService ConfigurationService
@inject IJSRuntime JSRuntime

<div class="configuration-management">
    <!-- Configuration Header -->
    <div class="config-header">
        <div class="header-content">
            <div class="header-title">
                <Icon Name="settings" CssClass="large primary-color" />
                <div>
                    <h2>Configuration Management</h2>
                    <p class="subtitle">Manage system settings and preferences</p>
                </div>
            </div>
            
            <div class="header-actions">
                <button class="btn btn-secondary" 
                        @onclick="ShowSearchModal" 
                        disabled="@IsLoading"
                        aria-label="Search configuration settings">
                    <Icon Name="search" CssClass="small" />
                    Search
                </button>
                
                <button class="btn btn-secondary" 
                        @onclick="ShowExportModal" 
                        disabled="@IsLoading"
                        aria-label="Export configuration">
                    <Icon Name="download" CssClass="small" />
                    Export
                </button>
                
                <button class="btn btn-primary" 
                        @onclick="RefreshConfiguration" 
                        disabled="@IsLoading"
                        aria-label="Refresh configuration">
                    <Icon Name="refresh" CssClass="small" />
                    @if (IsLoading) { <span>Loading...</span> } else { <span>Refresh</span> }
                </button>
            </div>
        </div>
        
        @if (UnsavedChangesCount > 0)
        {
            <div class="unsaved-changes-banner" role="alert">
                <Icon Name="alert-triangle" CssClass="small warning-color" />
                <span>You have @UnsavedChangesCount unsaved change@(UnsavedChangesCount != 1 ? "s" : "")</span>
                <div class="banner-actions">
                    <button class="btn btn-small btn-secondary" @onclick="DiscardAllChanges">
                        <Icon Name="x" CssClass="small" />
                        Discard All
                    </button>
                    <button class="btn btn-small btn-primary" @onclick="SaveAllChanges">
                        <Icon Name="save" CssClass="small" />
                        Save All
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Configuration Sections -->
    <div class="config-sections">
        @if (IsLoading && !Sections.Any())
        {
            <div class="loading-container">
                <div class="loading-spinner" aria-label="Loading configuration"></div>
                <p>Loading configuration...</p>
            </div>
        }
        else if (HasError)
        {
            <div class="error-container" role="alert">
                <Icon Name="alert-circle" CssClass="large error-color" />
                <h3>Configuration Error</h3>
                <p>@ErrorMessage</p>
                <button class="btn btn-primary" @onclick="RefreshConfiguration">
                    <Icon Name="refresh" CssClass="small" />
                    Retry
                </button>
            </div>
        }
        else
        {
            @foreach (var section in Sections)
            {
                <div class="config-section @(section.IsExpanded ? "expanded" : "collapsed")">
                    <div class="section-header" @onclick="() => ToggleSection(section)">
                        <div class="section-title">
                            <Icon Name="@(section.Icon)" CssClass="medium primary-color" />
                            <div>
                                <h3>@(section.Title)</h3>
                                <p class="section-description">@(section.Description)</p>
                            </div>
                        </div>
                        
                        <div class="section-info">
                            @if (section.ModifiedSettingCount > 0)
                            {
                                <span class="modified-badge">@(section.ModifiedSettingCount) modified</span>
                            }
                            @if (section.UnsavedChangesCount > 0)
                            {
                                <span class="unsaved-badge">@(section.UnsavedChangesCount) unsaved</span>
                            }
                            <span class="setting-count">@(section.SettingCount) settings</span>
                            <Icon Name="@(section.IsExpanded ? "chevron-up" : "chevron-down")" CssClass="small" />
                        </div>
                    </div>
                    
                    @if (section.IsExpanded)
                    {
                        <div class="section-content">
                            @if (!section.Settings.Any())
                            {
                                <div class="empty-section">
                                    <Icon Name="info" CssClass="medium text-muted" />
                                    <p>No settings available in this section</p>
                                </div>
                            }
                            else
                            {
                                <div class="settings-grid">
                                    @foreach (var setting in section.Settings)
                                    {
                                        <ConfigurationSettingComponent 
                                            Setting="setting"
                                            OnValueChanged="OnSettingChanged"
                                            OnSave="OnSettingSaved"
                                            OnReset="OnSettingReset"
                                            OnValidationError="OnValidationError" />
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>

    <!-- Configuration Search Modal -->
    @if (ShowSearch)
    {
        <ConfigurationSearchComponent 
            @bind-IsVisible="ShowSearch"
            OnSearchResults="OnSearchResults" />
    }

    <!-- Configuration Export Modal -->
    @if (ShowExport)
    {
        <ConfigurationExportComponent 
            @bind-IsVisible="ShowExport"
            Sections="@Sections.Select(s => s.Name).ToList()" />
    }

    <!-- Confirmation Dialogs -->
    @if (ShowConfirmDialog)
    {
        <div class="modal-overlay" @onclick="HideConfirmDialog">
            <div class="modal-content confirmation-modal" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <Icon Name="@ConfirmDialogIcon" CssClass="@($"medium {ConfirmDialogIconClass}")" />
                    <h3>@ConfirmDialogTitle</h3>
                </div>
                <div class="modal-body">
                    <p>@ConfirmDialogMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideConfirmDialog">Cancel</button>
                    <button class="btn @ConfirmDialogButtonClass" @onclick="ConfirmDialogAction">
                        <Icon Name="@ConfirmDialogButtonIcon" CssClass="small" />
                        @ConfirmDialogButtonText
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .configuration-management {
        padding: 1rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .config-header {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1.5rem;
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .subtitle {
        margin: 0;
        color: var(--gray-600);
        font-size: 0.875rem;
    }

    .header-actions {
        display: flex;
        gap: 0.75rem;
    }

    .unsaved-changes-banner {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1.5rem;
        background: #fef3c7;
        border-top: 1px solid #f59e0b;
        border-radius: 0 0 0.5rem 0.5rem;
        gap: 1rem;
    }

    .banner-actions {
        display: flex;
        gap: 0.5rem;
    }

    .config-sections {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .config-section {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        cursor: pointer;
        transition: background-color 0.15s ease;
        border-bottom: 1px solid transparent;
    }

    .section-header:hover {
        background: var(--gray-50);
    }

    .config-section.expanded .section-header {
        border-bottom-color: var(--gray-200);
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .section-description {
        margin: 0;
        color: var(--gray-600);
        font-size: 0.875rem;
    }

    .section-info {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 0.875rem;
    }

    .modified-badge {
        background: #dbeafe;
        color: #1e40af;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .unsaved-badge {
        background: #fef3c7;
        color: #92400e;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .setting-count {
        color: var(--gray-500);
    }

    .section-content {
        padding: 1.5rem;
    }

    .settings-grid {
        display: grid;
        gap: 1rem;
    }

    .empty-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 2rem;
        text-align: center;
        color: var(--gray-500);
    }

    .confirmation-modal {
        max-width: 400px;
        text-align: center;
    }

    .modal-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .configuration-management {
            padding: 0.5rem;
        }

        .header-content {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }

        .header-actions {
            justify-content: center;
        }

        .unsaved-changes-banner {
            flex-direction: column;
            align-items: stretch;
            gap: 0.75rem;
        }

        .section-header {
            padding: 1rem;
        }

        .section-title {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .section-info {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .section-content {
            padding: 1rem;
        }
    }
</style>

@code {
    [Parameter] public EventCallback<string> OnError { get; set; }

    private List<ConfigurationSectionModel> Sections { get; set; } = new();
    private bool ShowSearch { get; set; } = false;
    private bool ShowExport { get; set; } = false;
    private bool ShowConfirmDialog { get; set; } = false;
    
    private string ConfirmDialogTitle { get; set; } = string.Empty;
    private string ConfirmDialogMessage { get; set; } = string.Empty;
    private string ConfirmDialogIcon { get; set; } = "help-circle";
    private string ConfirmDialogIconClass { get; set; } = "primary-color";
    private string ConfirmDialogButtonText { get; set; } = "Confirm";
    private string ConfirmDialogButtonIcon { get; set; } = "check";
    private string ConfirmDialogButtonClass { get; set; } = "btn-primary";
    private Func<Task>? ConfirmDialogAction { get; set; }

    private int UnsavedChangesCount => Sections.Sum(s => s.UnsavedChangesCount);

    protected override async Task OnInitializedAsync()
    {
        await LoadConfiguration();
    }

    private async Task LoadConfiguration()
    {
        try
        {
            SetLoading(true);
            ClearError();
            
            Sections = await ConfigurationService.GetAllSectionsAsync();
            
            if (!Sections.Any())
            {
                SetError("No configuration sections available");
            }
        }
        catch (Exception ex)
        {
            SetError(ex.Message);
            await OnError.InvokeAsync(ex.Message);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshConfiguration()
    {
        await LoadConfiguration();
    }

    private void ToggleSection(ConfigurationSectionModel section)
    {
        section.IsExpanded = !section.IsExpanded;
    }

    private void ShowSearchModal()
    {
        ShowSearch = true;
    }

    private void ShowExportModal()
    {
        ShowExport = true;
    }

    private async Task OnSettingChanged(ConfigurationSettingModel setting)
    {
        setting.HasUnsavedChanges = true;
        StateHasChanged();
    }

    private async Task OnSettingSaved(ConfigurationSettingModel setting)
    {
        setting.HasUnsavedChanges = false;
        StateHasChanged();
    }

    private async Task OnSettingReset(ConfigurationSettingModel setting)
    {
        try
        {
            var result = await ConfigurationService.ResetSettingAsync(setting.Key);
            if (result != null)
            {
                // Update the setting with reset values
                setting.Value = result.Value;
                setting.RawValue = result.RawValue;
                setting.HasUnsavedChanges = false;
                setting.UpdatedAt = result.UpdatedAt;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await OnError.InvokeAsync($"Failed to reset setting: {ex.Message}");
        }
    }

    private async Task OnValidationError(string errorMessage)
    {
        await OnError.InvokeAsync(errorMessage);
    }

    private async Task OnSearchResults(List<ConfigurationSettingModel> results)
    {
        // Handle search results - could expand sections containing results
        foreach (var section in Sections)
        {
            var hasResults = results.Any(r => r.Section == section.Name);
            if (hasResults && !section.IsExpanded)
            {
                section.IsExpanded = true;
            }
        }
        StateHasChanged();
    }

    private async Task SaveAllChanges()
    {
        ShowConfirmation(
            "Save All Changes",
            $"Are you sure you want to save all {UnsavedChangesCount} unsaved changes?",
            "save",
            "success-color",
            "Save All",
            "save",
            "btn-primary",
            PerformSaveAllChanges
        );
    }

    private async Task DiscardAllChanges()
    {
        ShowConfirmation(
            "Discard All Changes",
            $"Are you sure you want to discard all {UnsavedChangesCount} unsaved changes? This action cannot be undone.",
            "alert-triangle",
            "warning-color",
            "Discard All",
            "trash",
            "btn-danger",
            PerformDiscardAllChanges
        );
    }

    private async Task PerformSaveAllChanges()
    {
        try
        {
            IsLoading = true;
            var unsavedSettings = Sections.SelectMany(s => s.Settings).Where(s => s.HasUnsavedChanges).ToList();
            
            foreach (var setting in unsavedSettings)
            {
                if (setting.EditingValue != null)
                {
                    await ConfigurationService.UpdateSettingAsync(setting.Key, setting.EditingValue);
                    setting.Value = setting.EditingValue;
                    setting.HasUnsavedChanges = false;
                    setting.IsEditing = false;
                }
            }
            
            HideConfirmDialog();
        }
        catch (Exception ex)
        {
            await OnError.InvokeAsync($"Failed to save changes: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task PerformDiscardAllChanges()
    {
        var unsavedSettings = Sections.SelectMany(s => s.Settings).Where(s => s.HasUnsavedChanges).ToList();
        
        foreach (var setting in unsavedSettings)
        {
            setting.EditingValue = null;
            setting.HasUnsavedChanges = false;
            setting.IsEditing = false;
            setting.ValidationError = null;
        }
        
        HideConfirmDialog();
        StateHasChanged();
    }

    private void ShowConfirmation(string title, string message, string icon, string iconClass, 
        string buttonText, string buttonIcon, string buttonClass, Func<Task> action)
    {
        ConfirmDialogTitle = title;
        ConfirmDialogMessage = message;
        ConfirmDialogIcon = icon;
        ConfirmDialogIconClass = iconClass;
        ConfirmDialogButtonText = buttonText;
        ConfirmDialogButtonIcon = buttonIcon;
        ConfirmDialogButtonClass = buttonClass;
        ConfirmDialogAction = action;
        ShowConfirmDialog = true;
    }

    private void HideConfirmDialog()
    {
        ShowConfirmDialog = false;
        ConfirmDialogAction = null;
    }
}