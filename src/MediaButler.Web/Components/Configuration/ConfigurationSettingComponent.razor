@using MediaButler.Web.Models.Configuration
@using MediaButler.Core.Enums
@using MediaButler.Web.Components.Base
@inherits MediaButlerComponentBase

<div class="configuration-setting @(Setting.IsModified ? "modified" : "")" @key="Setting.Key">
    <div class="setting-header" @onclick="ToggleExpanded">
        <div class="setting-info">
            <h4 class="setting-key">@Setting.Key</h4>
            @if (!string.IsNullOrEmpty(Setting.Description))
            {
                <p class="setting-description">@Setting.Description</p>
            }
        </div>
        
        <div class="setting-meta">
            @if (Setting.IsModified)
            {
                <span class="modified-indicator" title="Setting has been modified from default">Modified</span>
            }
            @if (Setting.RequiresRestart)
            {
                <span class="restart-indicator" title="Application restart required">Restart Required</span>
            }
            <Icon Name="@(Setting.IsExpanded ? "chevron-up" : "chevron-down")" CssClass="small" />
        </div>
    </div>
    
    @if (Setting.IsExpanded)
    {
        <div class="setting-content">
            <div class="setting-value-section">
                <div class="value-display">
                    <label class="value-label">Current Value:</label>
                    <div class="value-content">
                        @if (Setting.IsEditing)
                        {
                            @if (Setting.DataType == ConfigurationDataType.Boolean)
                            {
                                <select class="setting-input" @onchange="HandleValueChanged">
                                    <option value="true" selected="@(GetBooleanValue() == true)">True</option>
                                    <option value="false" selected="@(GetBooleanValue() == false)">False</option>
                                </select>
                            }
                            else if (Setting.DataType == ConfigurationDataType.Integer)
                            {
                                <input type="number" 
                                       class="setting-input" 
                                       value="@GetStringValue()" 
                                       @onchange="HandleValueChanged" />
                            }
                            else
                            {
                                <input type="text" 
                                       class="setting-input" 
                                       value="@GetStringValue()" 
                                       @onchange="HandleValueChanged" />
                            }
                        }
                        else
                        {
                            <span class="value-text">@FormatDisplayValue()</span>
                        }
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(Setting.ValidationError))
                {
                    <div class="validation-error" role="alert">
                        <Icon Name="alert-circle" CssClass="small error-color" />
                        @Setting.ValidationError
                    </div>
                }
            </div>
            
            <div class="setting-actions">
                @if (Setting.IsEditing)
                {
                    <button class="btn btn-small btn-secondary" @onclick="CancelEdit" disabled="@IsLoading">
                        <Icon Name="x" CssClass="small" />
                        Cancel
                    </button>
                    <button class="btn btn-small btn-primary" @onclick="SaveChanges" disabled="@IsLoading">
                        <Icon Name="save" CssClass="small" />
                        @if (IsLoading) { <span>Saving...</span> } else { <span>Save</span> }
                    </button>
                }
                else
                {
                    @if (Setting.IsEditable)
                    {
                        <button class="btn btn-small btn-secondary" @onclick="StartEdit">
                            <Icon Name="edit" CssClass="small" />
                            Edit
                        </button>
                    }
                    @if (Setting.IsModified)
                    {
                        <button class="btn btn-small btn-outline" @onclick="ResetToDefault">
                            <Icon Name="rotate-ccw" CssClass="small" />
                            Reset
                        </button>
                    }
                }
            </div>
        </div>
    }
</div>

<style>
    .configuration-setting {
        border: 1px solid var(--gray-200);
        border-radius: 0.5rem;
        background: white;
        overflow: hidden;
        transition: all 0.15s ease;
    }

    .configuration-setting.modified {
        border-color: var(--primary-color);
        background: #f0f9ff;
    }

    .setting-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        cursor: pointer;
        transition: background-color 0.15s ease;
    }

    .setting-header:hover {
        background: var(--gray-50);
    }

    .setting-info {
        flex: 1;
    }

    .setting-key {
        margin: 0 0 0.25rem 0;
        font-size: 1rem;
        font-weight: 600;
        color: var(--gray-900);
        font-family: 'Courier New', monospace;
    }

    .setting-description {
        margin: 0;
        font-size: 0.875rem;
        color: var(--gray-600);
        line-height: 1.4;
    }

    .setting-meta {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        font-size: 0.75rem;
    }

    .modified-indicator {
        background: #dbeafe;
        color: #1e40af;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-weight: 500;
    }

    .restart-indicator {
        background: #fef3c7;
        color: #92400e;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-weight: 500;
    }

    .setting-content {
        padding: 1rem;
        border-top: 1px solid var(--gray-200);
        background: var(--gray-50);
    }

    .setting-value-section {
        margin-bottom: 1rem;
    }

    .value-display {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .value-label {
        font-weight: 500;
        color: var(--gray-700);
        font-size: 0.875rem;
    }

    .value-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .value-text {
        padding: 0.5rem 0.75rem;
        background: white;
        border: 1px solid var(--gray-200);
        border-radius: 0.375rem;
        font-family: 'Courier New', monospace;
        color: var(--gray-700);
        min-width: 200px;
    }

    .setting-input {
        padding: 0.5rem 0.75rem;
        border: 1px solid var(--gray-300);
        border-radius: 0.375rem;
        font-family: 'Courier New', monospace;
        min-width: 200px;
    }

    .setting-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .validation-error {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        background: #fef2f2;
        border: 1px solid #fca5a5;
        border-radius: 0.375rem;
        color: #dc2626;
        font-size: 0.875rem;
        margin-top: 0.5rem;
    }

    .setting-actions {
        display: flex;
        gap: 0.75rem;
        justify-content: flex-end;
    }

    @@media (max-width: 768px) {
        .setting-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .setting-meta {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .value-display {
            gap: 0.75rem;
        }

        .setting-actions {
            justify-content: stretch;
        }

        .setting-actions .btn {
            flex: 1;
        }
    }
</style>

@code {
    [Parameter] public required ConfigurationSettingModel Setting { get; set; }
    [Parameter] public EventCallback<ConfigurationSettingModel> OnValueChanged { get; set; }
    [Parameter] public EventCallback<ConfigurationSettingModel> OnSave { get; set; }
    [Parameter] public EventCallback<ConfigurationSettingModel> OnReset { get; set; }
    [Parameter] public EventCallback<string> OnValidationError { get; set; }

    private void ToggleExpanded()
    {
        Setting.IsExpanded = !Setting.IsExpanded;
    }

    private void StartEdit()
    {
        Setting.IsEditing = true;
        Setting.EditingValue = Setting.Value?.ToString();
        Setting.ValidationError = null;
    }

    private void CancelEdit()
    {
        Setting.IsEditing = false;
        Setting.EditingValue = null;
        Setting.ValidationError = null;
    }

    private async Task HandleValueChanged(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        var stringValue = e.Value?.ToString() ?? string.Empty;
        object? newValue = null;

        try
        {
            newValue = Setting.DataType switch
            {
                ConfigurationDataType.Boolean => bool.Parse(stringValue),
                ConfigurationDataType.Integer => int.Parse(stringValue),
                ConfigurationDataType.String or ConfigurationDataType.Path => stringValue,
                _ => stringValue
            };

            Setting.EditingValue = newValue?.ToString();
            Setting.ValidationError = null;
            
            await OnValueChanged.InvokeAsync(Setting);
        }
        catch (Exception ex)
        {
            Setting.ValidationError = $"Invalid value for {Setting.DataType}: {ex.Message}";
            await OnValidationError.InvokeAsync(Setting.ValidationError ?? string.Empty);
        }
    }

    private async Task SaveChanges()
    {
        if (Setting.EditingValue == null) return;

        try
        {
            SetLoading(true);
            Setting.Value = Setting.EditingValue;
            Setting.IsEditing = false;
            Setting.EditingValue = null;
            Setting.HasUnsavedChanges = false;
            
            await OnSave.InvokeAsync(Setting);
        }
        catch (Exception ex)
        {
            SetError($"Failed to save setting: {ex.Message}");
        }
        finally
        {
            SetLoading(false);
        }
    }

    private async Task ResetToDefault()
    {
        await OnReset.InvokeAsync(Setting);
    }

    private bool? GetBooleanValue()
    {
        var value = Setting.IsEditing ? Setting.EditingValue : Setting.Value;
        return value switch
        {
            bool b => b,
            string s when bool.TryParse(s, out var result) => result,
            _ => null
        };
    }

    private string GetStringValue()
    {
        var value = Setting.IsEditing ? Setting.EditingValue : Setting.Value;
        return value?.ToString() ?? string.Empty;
    }

    private string FormatDisplayValue()
    {
        return Setting.Value switch
        {
            null => "(not set)",
            bool b => b ? "true" : "false",
            string s when string.IsNullOrEmpty(s) => "(empty)",
            _ => Setting.Value.ToString() ?? "(null)"
        };
    }
}