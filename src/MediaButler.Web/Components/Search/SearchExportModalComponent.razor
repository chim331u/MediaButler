@using MediaButler.Web.Services.Search
@using MediaButler.Web.Models
@inherits ComponentBase
@inject ISearchExportService ExportService
@inject IJSRuntime JSRuntime
@inject ILogger<SearchExportModalComponent> Logger

<div class="modal-overlay @(IsVisible ? "visible" : "")" @onclick="CloseModal">
    <div class="modal-content export-modal" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h3>Export Search Results</h3>
            <button class="modal-close" @onclick="CloseModal">
                <Icon Name="x" CssClass="small" />
            </button>
        </div>

        <div class="modal-body">
            @if (IsExporting)
            {
                <div class="export-progress">
                    <div class="progress-info">
                        <Icon Name="download" CssClass="small" />
                        <span>Exporting @FilesCount files...</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @(ExportProgress)%"></div>
                    </div>
                    <div class="progress-text">@ExportProgress% complete</div>
                </div>
            }
            else
            {
                <div class="export-options">
                    <div class="export-summary">
                        <Icon Name="file-text" CssClass="small" />
                        <span>@FilesCount files will be exported</span>
                    </div>

                    <div class="format-selection">
                        <label class="field-label">Export Format</label>
                        <div class="format-options">
                            @foreach (var format in SupportedFormats)
                            {
                                <div class="format-option @(SelectedFormat?.Id == format.Id ? "selected" : "")"
                                     @onclick="() => SelectFormat(format)">
                                    <div class="format-header">
                                        <Icon Name="@format.Icon" CssClass="small" />
                                        <span class="format-name">@format.Name</span>
                                        @if (SelectedFormat?.Id == format.Id)
                                        {
                                            <Icon Name="check" CssClass="tiny format-selected" />
                                        }
                                    </div>
                                    <div class="format-description">@format.Description</div>
                                </div>
                            }
                        </div>
                    </div>

                    @if (SearchCriteria.HasActiveCriteria())
                    {
                        <div class="export-details">
                            <label class="field-label">Search Criteria (included in export)</label>
                            <div class="criteria-summary">
                                <Icon Name="filter" CssClass="tiny" />
                                <span>@SearchCriteria.GetDescription()</span>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <div class="modal-footer">
            @if (IsExporting)
            {
                <button class="btn btn-secondary" disabled>
                    <Icon Name="download" CssClass="tiny" />
                    Exporting...
                </button>
            }
            else
            {
                <button class="btn btn-secondary" @onclick="CloseModal">
                    Cancel
                </button>
                <button class="btn btn-primary" 
                        @onclick="StartExport"
                        disabled="@(SelectedFormat == null)">
                    <Icon Name="download" CssClass="tiny" />
                    Export @(SelectedFormat?.Name ?? "")
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public List<TrackedFileModel> Files { get; set; } = new();
    [Parameter] public SearchCriteriaModel SearchCriteria { get; set; } = new();
    [Parameter] public EventCallback OnClose { get; set; }

    private List<ExportFormat> SupportedFormats { get; set; } = new();
    private ExportFormat? SelectedFormat { get; set; }
    private bool IsExporting { get; set; }
    private double ExportProgress { get; set; }
    private int FilesCount => Files?.Count ?? 0;

    protected override void OnInitialized()
    {
        SupportedFormats = ExportService.GetSupportedFormats();
        SelectedFormat = SupportedFormats.FirstOrDefault(f => f.Id == "csv"); // Default to CSV
    }

    private void SelectFormat(ExportFormat format)
    {
        SelectedFormat = format;
        StateHasChanged();
    }

    private async Task StartExport()
    {
        if (SelectedFormat == null || Files == null || !Files.Any())
            return;

        try
        {
            IsExporting = true;
            ExportProgress = 0;
            StateHasChanged();

            byte[] exportData;
            string filename;

            // Simulate progress updates
            var progressTimer = new System.Timers.Timer(100);
            progressTimer.Elapsed += (s, e) =>
            {
                if (ExportProgress < 90)
                {
                    ExportProgress += 2;
                    InvokeAsync(StateHasChanged);
                }
            };
            progressTimer.Start();

            try
            {
                // Perform export based on selected format
                switch (SelectedFormat.Id)
                {
                    case "csv":
                        exportData = await ExportService.ExportToCsvAsync(Files, SearchCriteria);
                        filename = $"mediabutler-search-{DateTime.Now:yyyyMMdd-HHmmss}.csv";
                        break;
                    case "json":
                        exportData = await ExportService.ExportToJsonAsync(Files, SearchCriteria);
                        filename = $"mediabutler-search-{DateTime.Now:yyyyMMdd-HHmmss}.json";
                        break;
                    case "excel":
                        exportData = await ExportService.ExportToExcelAsync(Files, SearchCriteria);
                        filename = $"mediabutler-search-{DateTime.Now:yyyyMMdd-HHmmss}.xlsx";
                        break;
                    default:
                        throw new NotSupportedException($"Export format '{SelectedFormat.Id}' is not supported");
                }

                progressTimer.Stop();
                ExportProgress = 100;
                StateHasChanged();

                // Download file using JavaScript
                await DownloadFile(exportData, filename, SelectedFormat.MimeType);

                // Small delay to show completion
                await Task.Delay(500);
            }
            finally
            {
                progressTimer.Stop();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during export process");
            // Could show error message to user here
        }
        finally
        {
            IsExporting = false;
            ExportProgress = 0;
            await CloseModal();
        }
    }

    private async Task DownloadFile(byte[] data, string filename, string mimeType)
    {
        try
        {
            var base64 = Convert.ToBase64String(data);
            await JSRuntime.InvokeVoidAsync("downloadFile", base64, filename, mimeType);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading exported file");
            throw;
        }
    }

    private async Task CloseModal()
    {
        if (IsExporting) return; // Don't close while exporting

        await OnClose.InvokeAsync();
    }
}

<style>
    .export-modal {
        width: 100%;
        max-width: 600px;
        max-height: 80vh;
    }

    .export-progress {
        text-align: center;
        padding: 2rem 0;
    }

    .progress-info {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
        font-weight: var(--font-medium);
        color: var(--text-muted);
    }

    .progress-bar {
        width: 100%;
        height: 8px;
        background: var(--gray-200);
        border-radius: var(--radius-full);
        overflow: hidden;
        margin-bottom: 0.5rem;
    }

    .progress-fill {
        height: 100%;
        background: var(--primary-500);
        border-radius: var(--radius-full);
        transition: width 0.3s ease;
    }

    .progress-text {
        font-size: var(--text-sm);
        color: var(--text-muted);
    }

    .export-summary {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: var(--gray-50);
        border-radius: var(--radius-md);
        margin-bottom: 1.5rem;
        font-weight: var(--font-medium);
    }

    .format-selection {
        margin-bottom: 1.5rem;
    }

    .format-options {
        display: grid;
        gap: 0.75rem;
        margin-top: 0.5rem;
    }

    .format-option {
        padding: 1rem;
        border: 2px solid var(--gray-200);
        border-radius: var(--radius-md);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .format-option:hover {
        border-color: var(--primary-300);
        background: var(--primary-25);
    }

    .format-option.selected {
        border-color: var(--primary-500);
        background: var(--primary-50);
    }

    .format-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
    }

    .format-name {
        font-weight: var(--font-semibold);
        flex: 1;
    }

    .format-selected {
        color: var(--primary-600);
    }

    .format-description {
        font-size: var(--text-sm);
        color: var(--text-muted);
        line-height: 1.4;
    }

    .export-details {
        margin-bottom: 1rem;
    }

    .criteria-summary {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem;
        background: var(--warning-50);
        border: 1px solid var(--warning-200);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
        margin-top: 0.5rem;
    }


    /* Dark theme support */
    [data-theme="dark"] .export-summary {
        background: var(--gray-800);
    }

    [data-theme="dark"] .format-option {
        border-color: var(--gray-700);
        background: var(--gray-800);
    }

    [data-theme="dark"] .format-option:hover {
        border-color: var(--primary-400);
        background: var(--primary-900);
    }

    [data-theme="dark"] .format-option.selected {
        border-color: var(--primary-400);
        background: var(--primary-900);
    }

    [data-theme="dark"] .criteria-summary {
        background: var(--warning-900);
        border-color: var(--warning-700);
    }

    [data-theme="dark"] .progress-bar {
        background: var(--gray-700);
    }

    /* Tablet Responsive (768px - 1024px) */
    @@media (min-width: 768px) and (max-width: 1024px) {
        .export-modal {
            width: 80vw;
            max-width: 600px;
        }

        .format-options {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .format-option {
            padding: 1rem;
        }

        .modal-footer {
            gap: 1rem;
        }

        .modal-footer .btn {
            flex: 1;
            min-width: 120px;
        }
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .export-modal {
            width: 95vw;
            max-width: none;
            margin: 1rem;
        }

        .format-options {
            gap: 0.5rem;
        }

        .format-option {
            padding: 0.75rem;
        }

        .format-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.25rem;
        }

        .format-name {
            font-size: var(--text-sm);
        }

        .format-description {
            font-size: var(--text-xs);
        }

        .modal-footer {
            flex-direction: column;
            gap: 0.75rem;
        }

        .modal-footer .btn {
            width: 100%;
            justify-content: center;
        }
    }

    @@media (max-width: 480px) {
        .export-modal {
            width: 100vw;
            height: 100vh;
            max-height: none;
            border-radius: 0;
            margin: 0;
        }

        .modal-header {
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-body {
            padding: 1rem;
            flex: 1;
            overflow-y: auto;
        }

        .modal-footer {
            padding: 1rem;
            border-top: 1px solid var(--border-color);
        }

        .export-summary {
            padding: 0.75rem;
            margin-bottom: 1rem;
        }

        .criteria-summary {
            padding: 0.5rem;
            font-size: var(--text-xs);
        }
    }
</style>