@using MediaButler.Web.Models
@using MediaButler.Web.Services.Search
@inherits MediaButler.Web.Components.Base.MediaButlerComponentBase
@inject ISavedSearchService SavedSearchService

<div class="advanced-search-container">
    <div class="search-header">
        <div class="header-title">
            <Icon Name="search" CssClass="large primary-color" />
            <div>
                <h2>Advanced Search</h2>
                <span class="header-subtitle">Find files with detailed criteria</span>
            </div>
        </div>
        <div class="search-actions">
            <button class="btn btn-ghost" @onclick="ClearAllFilters" disabled="@IsLoading">
                <Icon Name="x" CssClass="small" />
                Clear All
            </button>
            <button class="btn btn-secondary" @onclick="ToggleCollapsed" title="@(IsCollapsed ? "Expand" : "Collapse") search form">
                <Icon Name="@(IsCollapsed ? "chevron-down" : "chevron-up")" CssClass="small" />
                @(IsCollapsed ? "Expand" : "Collapse")
            </button>
        </div>
    </div>

    <div class="search-form @(IsCollapsed ? "collapsed" : "expanded")">
        <!-- Quick Search Bar -->
        <div class="quick-search-section">
            <div class="search-input-group">
                <Icon Name="search" CssClass="small search-icon" aria-hidden="true" />
                <label for="quick-search-input" class="sr-only">Quick search</label>
                <input id="quick-search-input"
                       type="text" 
                       class="search-input" 
                       placeholder="Search by filename, category, or content..." 
                       aria-label="Search files by filename, category, or content"
                       @bind="SearchCriteria.QuickSearch" 
                                             @onkeypress="HandleKeyPress" />
                @if (!string.IsNullOrEmpty(SearchCriteria.QuickSearch))
                {
                    <button class="clear-input-btn" 
                            @onclick="ClearQuickSearch" 
                            aria-label="Clear search input"
                            title="Clear search">
                        <Icon Name="x" CssClass="tiny" aria-hidden="true" />
                    </button>
                }
            </div>
            <button class="search-btn primary" @onclick="ExecuteSearchAsync" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <div class="loading-spinner small"></div>
                }
                else
                {
                    <Icon Name="search" CssClass="small" />
                }
                Search
            </button>
        </div>

        <!-- Advanced Filters -->
        @if (!IsCollapsed)
        {
            <div class="advanced-filters">
                <!-- File Properties -->
                <div class="filter-group">
                    <h3>File Properties</h3>
                    <div class="filter-grid">
                        <div class="filter-item">
                            <label class="filter-label">Category</label>
                            <select class="filter-select" @bind="SearchCriteria.Category">
                                <option value="">All Categories</option>
                                @foreach (var category in AvailableCategories)
                                {
                                    <option value="@category">@category</option>
                                }
                            </select>
                        </div>

                        <div class="filter-item">
                            <label class="filter-label">File Status</label>
                            <select class="filter-select" @bind="SearchCriteria.Status">
                                <option value="">All Status</option>
                                <option value="New">New</option>
                                <option value="Classified">Classified</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="Moved">Moved</option>
                                <option value="Error">Error</option>
                            </select>
                        </div>

                        <div class="filter-item">
                            <label class="filter-label">File Extension</label>
                            <select class="filter-select" @bind="SearchCriteria.FileExtension">
                                <option value="">All Extensions</option>
                                <option value=".mkv">.mkv</option>
                                <option value=".mp4">.mp4</option>
                                <option value=".avi">.avi</option>
                                <option value=".m4v">.m4v</option>
                                <option value=".wmv">.wmv</option>
                            </select>
                        </div>

                        <div class="filter-item">
                            <label class="filter-label">Quality</label>
                            <select class="filter-select" @bind="SearchCriteria.Quality">
                                <option value="">All Qualities</option>
                                <option value="4K">4K / 2160p</option>
                                <option value="1080p">1080p</option>
                                <option value="720p">720p</option>
                                <option value="480p">480p</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- File Size -->
                <div class="filter-group">
                    <h3>File Size</h3>
                    <div class="size-filter-grid">
                        <div class="size-range">
                            <label class="filter-label">Min Size (MB)</label>
                            <input type="number" 
                                   class="filter-input" 
                                   placeholder="0" 
                                   @bind="SearchCriteria.MinSizeMB" 
                                   @bind:after="NotifySearchChanged" 
                                   min="0" />
                        </div>
                        <div class="size-range">
                            <label class="filter-label">Max Size (MB)</label>
                            <input type="number" 
                                   class="filter-input" 
                                   placeholder="No limit" 
                                   @bind="SearchCriteria.MaxSizeMB" 
                                   @bind:after="NotifySearchChanged" 
                                   min="0" />
                        </div>
                        <div class="size-presets">
                            <label class="filter-label">Quick Size</label>
                            <div class="preset-buttons">
                                <button class="preset-btn" @onclick="() => SetSizePreset(0, 100)">Small (&lt;100MB)</button>
                                <button class="preset-btn" @onclick="() => SetSizePreset(100, 1000)">Medium (100MB-1GB)</button>
                                <button class="preset-btn" @onclick="() => SetSizePreset(1000, null)">Large (&gt;1GB)</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Date Range -->
                <div class="filter-group">
                    <h3>Date Range</h3>
                    <div class="date-filter-grid">
                        <div class="date-range">
                            <label class="filter-label">From Date</label>
                            <input type="date" 
                                   class="filter-input" 
                                   @bind="SearchCriteria.FromDate" 
                                   @bind:after="NotifySearchChanged" />
                        </div>
                        <div class="date-range">
                            <label class="filter-label">To Date</label>
                            <input type="date" 
                                   class="filter-input" 
                                   @bind="SearchCriteria.ToDate" 
                                   @bind:after="NotifySearchChanged" />
                        </div>
                        <div class="date-presets">
                            <label class="filter-label">Quick Date</label>
                            <div class="preset-buttons">
                                <button class="preset-btn" @onclick="() => SetDatePreset(1)">Last 24h</button>
                                <button class="preset-btn" @onclick="() => SetDatePreset(7)">Last Week</button>
                                <button class="preset-btn" @onclick="() => SetDatePreset(30)">Last Month</button>
                                <button class="preset-btn" @onclick="ClearDateRange">All Time</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- ML Classification -->
                <div class="filter-group">
                    <h3>ML Classification</h3>
                    <div class="ml-filter-grid">
                        <div class="confidence-range">
                            <label class="filter-label">Min Confidence (%)</label>
                            <input type="range" 
                                   class="confidence-slider" 
                                   min="0" 
                                   max="100" 
                                   @bind="SearchCriteria.MinConfidence" 
                                   @bind:after="NotifySearchChanged" />
                            <span class="confidence-value">@SearchCriteria.MinConfidence%</span>
                        </div>
                        
                        <div class="filter-checkboxes">
                            <label class="checkbox-label">
                                <input type="checkbox" 
                                       class="filter-checkbox" 
                                       @bind="SearchCriteria.OnlyAutoClassified" 
                                       @bind:after="NotifySearchChanged" />
                                <span class="checkbox-text">Auto-classified only</span>
                            </label>
                            
                            <label class="checkbox-label">
                                <input type="checkbox" 
                                       class="filter-checkbox" 
                                       @bind="SearchCriteria.OnlyManuallyReviewed" 
                                       @bind:after="NotifySearchChanged" />
                                <span class="checkbox-text">Manually reviewed only</span>
                            </label>
                            
                            <label class="checkbox-label">
                                <input type="checkbox" 
                                       class="filter-checkbox" 
                                       @bind="SearchCriteria.HasErrors" 
                                       @bind:after="NotifySearchChanged" />
                                <span class="checkbox-text">Has processing errors</span>
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Sort Options -->
                <div class="filter-group">
                    <h3>Sort & Display</h3>
                    <div class="sort-filter-grid">
                        <div class="filter-item">
                            <label class="filter-label">Sort By</label>
                            <select class="filter-select" @bind="SearchCriteria.SortBy">
                                <option value="CreatedDate">Date Added</option>
                                <option value="Filename">Filename</option>
                                <option value="Category">Category</option>
                                <option value="SizeMB">File Size</option>
                                <option value="Confidence">ML Confidence</option>
                                <option value="LastUpdateDate">Last Modified</option>
                            </select>
                        </div>

                        <div class="filter-item">
                            <label class="filter-label">Sort Direction</label>
                            <select class="filter-select" @bind="SearchCriteria.SortDirection">
                                <option value="Desc">Newest First</option>
                                <option value="Asc">Oldest First</option>
                            </select>
                        </div>

                        <div class="filter-item">
                            <label class="filter-label">Results Per Page</label>
                            <select class="filter-select" @bind="SearchCriteria.PageSize">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Search Summary -->
        @if (ActiveFiltersCount > 0)
        {
            <div class="search-summary">
                <div class="summary-info">
                    <Icon Name="filter" CssClass="small" />
                    <span>@ActiveFiltersCount active filter@(ActiveFiltersCount == 1 ? "" : "s")</span>
                    @if (LastSearchResultsCount.HasValue)
                    {
                        <span class="results-count">• @LastSearchResultsCount.Value result@(LastSearchResultsCount.Value == 1 ? "" : "s") found</span>
                    }
                </div>
                <div class="summary-actions">
                    <button class="btn btn-ghost" @onclick="ShowSaveSearchModal" disabled="@IsLoading">
                        <Icon Name="bookmark" CssClass="small" />
                        Save Search
                    </button>
                    <button class="btn btn-ghost" @onclick="ShowExportModal" disabled="@IsLoading || !LastSearchResultsCount.HasValue || SearchResults?.Any() != true">
                        <Icon Name="download" CssClass="small" />
                        Export Results
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Export Modal -->
<SearchExportModalComponent IsVisible="ShowExportModalState" 
                            Files="SearchResults ?? new List<TrackedFileModel>()" 
                            SearchCriteria="SearchCriteria"
                            OnClose="CloseExportModal" />

<!-- Save Search Modal (TODO: Create this component) -->
@if (ShowSaveSearchModalState)
{
    <div class="modal-overlay visible" @onclick="CloseSaveSearchModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Save Search</h3>
                <button class="modal-close" @onclick="CloseSaveSearchModal">
                    <Icon Name="x" CssClass="small" />
                </button>
            </div>
            <div class="modal-body">
                <div class="field">
                    <label class="field-label">Search Name</label>
                    <input type="text" 
                           class="field-input" 
                           @bind="SaveSearchName" 
                           placeholder="Enter a name for this search..."
                           maxlength="100" />
                </div>
                <div class="field">
                    <label class="field-label">Description</label>
                    <div class="search-description">@SearchCriteria.GetDescription()</div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseSaveSearchModal">Cancel</button>
                <button class="btn btn-primary" 
                        @onclick="SaveSearch" 
                        disabled="@(string.IsNullOrWhiteSpace(SaveSearchName) || IsSaving)">
                    @if (IsSaving)
                    {
                        <div class="loading-spinner tiny"></div>
                    }
                    else
                    {
                        <Icon Name="bookmark" CssClass="tiny" />
                    }
                    Save Search
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<SearchCriteriaModel> OnSearchExecuted { get; set; }
    [Parameter] public EventCallback<SearchCriteriaModel> OnSearchChanged { get; set; }
    [Parameter] public SearchCriteriaModel? InitialCriteria { get; set; }
    [Parameter] public List<TrackedFileModel>? SearchResults { get; set; }

    private SearchCriteriaModel SearchCriteria { get; set; } = new();
    private bool IsCollapsed { get; set; } = false;
    private int ActiveFiltersCount => SearchCriteria.GetActiveFiltersCount();
    private int? LastSearchResultsCount { get; set; }

    // Modal states
    private bool ShowExportModalState { get; set; }
    private bool ShowSaveSearchModalState { get; set; }
    private string SaveSearchName { get; set; } = string.Empty;
    private bool IsSaving { get; set; }

    // Available options (replace with actual API data)
    private List<string> AvailableCategories { get; set; } = new()
    {
        "TV SERIES", "MOVIES", "DOCUMENTARIES", "ANIME", "MUSIC", "OTHER"
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        if (InitialCriteria != null)
        {
            SearchCriteria = InitialCriteria with { }; // Create copy
        }
    }

    // Event Handlers
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ExecuteSearchAsync();
        }
    }

    private async Task ExecuteSearchAsync()
    {
        await ExecuteAsync(async () =>
        {
            // Trigger search execution
            await OnSearchExecuted.InvokeAsync(SearchCriteria);
            
            // TODO: Get actual results count from search response
            LastSearchResultsCount = new Random().Next(0, 150);
            
            StateHasChanged();
        }, "Executing search");
    }

    private void NotifySearchChanged()
    {
        // Notify parent of criteria changes for real-time filtering - fire and forget
        _ = OnSearchChanged.InvokeAsync(SearchCriteria);
    }

    // Filter Management
    private void ClearAllFilters()
    {
        SearchCriteria = new SearchCriteriaModel();
        LastSearchResultsCount = null;
        NotifySearchChanged();
        StateHasChanged();
    }

    private void ClearQuickSearch()
    {
        SearchCriteria.QuickSearch = string.Empty;
        NotifySearchChanged();
        StateHasChanged();
    }

    private void ToggleCollapsed()
    {
        IsCollapsed = !IsCollapsed;
        StateHasChanged();
    }

    // Preset Actions
    private void SetSizePreset(int? minMB, int? maxMB)
    {
        SearchCriteria.MinSizeMB = minMB;
        SearchCriteria.MaxSizeMB = maxMB;
        NotifySearchChanged();
        StateHasChanged();
    }

    private void SetDatePreset(int days)
    {
        SearchCriteria.FromDate = DateOnly.FromDateTime(DateTime.Now.AddDays(-days));
        SearchCriteria.ToDate = DateOnly.FromDateTime(DateTime.Now);
        NotifySearchChanged();
        StateHasChanged();
    }

    private void ClearDateRange()
    {
        SearchCriteria.FromDate = null;
        SearchCriteria.ToDate = null;
        NotifySearchChanged();
        StateHasChanged();
    }

    // Modal Management
    private void ShowExportModal()
    {
        ShowExportModalState = true;
        StateHasChanged();
    }

    private void CloseExportModal()
    {
        ShowExportModalState = false;
        StateHasChanged();
    }

    private void ShowSaveSearchModal()
    {
        SaveSearchName = string.Empty;
        ShowSaveSearchModalState = true;
        StateHasChanged();
    }

    private void CloseSaveSearchModal()
    {
        ShowSaveSearchModalState = false;
        SaveSearchName = string.Empty;
        IsSaving = false;
        StateHasChanged();
    }

    // Save and Export
    private async Task SaveSearch()
    {
        if (string.IsNullOrWhiteSpace(SaveSearchName))
            return;

        await ExecuteAsync(async () =>
        {
            IsSaving = true;
            StateHasChanged();

            var savedSearch = await SavedSearchService.SaveSearchAsync(SaveSearchName.Trim(), SearchCriteria);
            
            Logger.LogInformation("Saved search '{SearchName}' with ID {SearchId}", savedSearch.Name, savedSearch.Id);
            
            CloseSaveSearchModal();
        }, "Saving search");
    }
}

<style>
    .advanced-search-container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
    }

    .search-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-4);
        padding-bottom: var(--space-3);
        border-bottom: 1px solid var(--border-color);
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: var(--space-3);
    }

    .header-title h2 {
        margin: 0;
        font-size: var(--text-2xl);
        font-weight: var(--font-bold);
        color: var(--text-primary);
    }

    .header-subtitle {
        font-size: var(--text-base);
        color: var(--text-secondary);
        font-weight: var(--font-normal);
    }

    .search-actions {
        display: flex;
        gap: var(--space-2);
    }

    .search-form {
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        transition: all 0.3s ease;
    }

    .search-form.collapsed .advanced-filters {
        display: none;
    }

    /* Quick Search */
    .quick-search-section {
        display: flex;
        gap: var(--space-3);
        margin-bottom: var(--space-4);
        align-items: center;
    }

    .search-input-group {
        position: relative;
        flex: 1;
        max-width: 600px;
    }

    .search-icon {
        position: absolute;
        left: var(--space-3);
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-secondary);
        pointer-events: none;
    }

    .search-input {
        width: 100%;
        padding: var(--space-3) var(--space-4) var(--space-3) var(--space-10);
        border: 2px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: var(--text-base);
        background: var(--background);
        color: var(--text-primary);
        transition: border-color 0.2s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .clear-input-btn {
        position: absolute;
        right: var(--space-3);
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        padding: var(--space-1);
        border-radius: var(--radius-sm);
        transition: all 0.2s ease;
    }

    .clear-input-btn:hover {
        background: var(--background-subtle);
        color: var(--text-primary);
    }

    .search-btn {
        padding: var(--space-3) var(--space-6);
        white-space: nowrap;
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    /* Advanced Filters */
    .advanced-filters {
        display: flex;
        flex-direction: column;
        gap: var(--space-6);
    }

    .filter-group {
        background: var(--background);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        padding: var(--space-4);
    }

    .filter-group h3 {
        margin: 0 0 var(--space-4) 0;
        font-size: var(--text-lg);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        border-bottom: 1px solid var(--border-color);
        padding-bottom: var(--space-2);
    }

    .filter-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--space-4);
    }

    .filter-item {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .filter-label {
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
        color: var(--text-primary);
    }

    .filter-select,
    .filter-input {
        padding: var(--space-2) var(--space-3);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
        background: var(--background-elevated);
        color: var(--text-primary);
        transition: border-color 0.2s ease;
    }

    .filter-select:focus,
    .filter-input:focus {
        outline: none;
        border-color: var(--primary-color);
    }

    /* Size Filters */
    .size-filter-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 2fr;
        gap: var(--space-4);
        align-items: end;
    }

    .size-range {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .size-presets {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .preset-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-2);
    }

    .preset-btn {
        padding: var(--space-1) var(--space-2);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-sm);
        background: var(--background-subtle);
        color: var(--text-secondary);
        font-size: var(--text-xs);
        cursor: pointer;
        transition: all 0.2s ease;
        white-space: nowrap;
    }

    .preset-btn:hover {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    /* Date Filters */
    .date-filter-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 2fr;
        gap: var(--space-4);
        align-items: end;
    }

    .date-range {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .date-presets {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    /* ML Filters */
    .ml-filter-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-4);
        align-items: start;
    }

    .confidence-range {
        display: flex;
        flex-direction: column;
        gap: var(--space-2);
    }

    .confidence-slider {
        width: 100%;
        height: 6px;
        border-radius: var(--radius-full);
        background: var(--background-subtle);
        outline: none;
        -webkit-appearance: none;
    }

    .confidence-slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: var(--primary-color);
        cursor: pointer;
        box-shadow: var(--shadow-sm);
    }

    .confidence-slider::-moz-range-thumb {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: var(--primary-color);
        cursor: pointer;
        border: none;
        box-shadow: var(--shadow-sm);
    }

    .confidence-value {
        font-size: var(--text-sm);
        font-weight: var(--font-semibold);
        color: var(--primary-color);
        text-align: center;
    }

    .filter-checkboxes {
        display: flex;
        flex-direction: column;
        gap: var(--space-3);
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        cursor: pointer;
        font-size: var(--text-sm);
    }

    .filter-checkbox {
        width: 16px;
        height: 16px;
        accent-color: var(--primary-color);
    }

    .checkbox-text {
        color: var(--text-primary);
        user-select: none;
    }

    /* Sort Filters */
    .sort-filter-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: var(--space-4);
    }

    /* Search Summary */
    .search-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--space-3) var(--space-4);
        background: var(--primary-50);
        border: 1px solid var(--primary-200);
        border-radius: var(--radius-md);
        margin-top: var(--space-4);
    }

    .summary-info {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        font-size: var(--text-sm);
        color: var(--primary-700);
        font-weight: var(--font-medium);
    }

    .results-count {
        color: var(--text-secondary);
        font-weight: var(--font-normal);
    }

    .summary-actions {
        display: flex;
        gap: var(--space-2);
    }

    /* Mobile Responsive */
    /* Desktop optimizations (1024px+) */
    @@media (min-width: 1024px) {
        .advanced-search-container {
            max-width: 1200px;
        }

        .filter-grid {
            grid-template-columns: repeat(4, 1fr);
        }

        .size-filter-grid,
        .date-filter-grid {
            grid-template-columns: 1fr 1fr 2fr;
        }

        .ml-filter-grid {
            grid-template-columns: 1fr 1fr;
        }

        .sort-filter-grid {
            grid-template-columns: repeat(3, 1fr);
        }

        .search-summary {
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
        }

        .summary-actions {
            flex-shrink: 0;
        }
    }

    /* Tablet-specific optimizations (768px - 1024px) */
    @@media (min-width: 768px) and (max-width: 1024px) {
        .filter-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .size-filter-grid,
        .date-filter-grid {
            grid-template-columns: 1fr 1fr 1fr;
        }

        .ml-filter-grid {
            grid-template-columns: 1fr 1fr;
        }

        .sort-filter-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .search-summary {
            flex-direction: row;
            gap: var(--space-4);
        }

        .advanced-search-container {
            max-width: 900px;
        }
    }

    @@media (max-width: 768px) {
        .search-header {
            flex-direction: column;
            gap: var(--space-3);
            align-items: stretch;
        }

        .quick-search-section {
            flex-direction: column;
            gap: var(--space-2);
        }

        .search-btn {
            align-self: stretch;
            justify-content: center;
        }

        .filter-grid {
            grid-template-columns: 1fr;
        }

        .size-filter-grid,
        .date-filter-grid {
            grid-template-columns: 1fr;
        }

        .ml-filter-grid {
            grid-template-columns: 1fr;
        }

        .sort-filter-grid {
            grid-template-columns: 1fr;
        }

        .search-summary {
            flex-direction: column;
            gap: var(--space-3);
            text-align: center;
        }

        .preset-buttons {
            justify-content: center;
        }
    }

    @@media (max-width: 480px) {
        .advanced-search-container {
            padding: 0 var(--space-2);
        }

        .search-form {
            padding: var(--space-3);
        }

        .filter-group {
            padding: var(--space-3);
        }

        .preset-btn {
            flex: 1;
            text-align: center;
        }
    }

    /* Save Search Modal Styles */
    .search-description {
        padding: var(--space-3);
        background: var(--background-subtle);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: var(--text-sm);
        color: var(--text-secondary);
        line-height: 1.4;
        min-height: 2.5rem;
    }

    .field {
        margin-bottom: var(--space-4);
    }

    .field:last-child {
        margin-bottom: 0;
    }

    .field-label {
        display: block;
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
        color: var(--text-primary);
        margin-bottom: var(--space-2);
    }

    .field-input {
        width: 100%;
        padding: var(--space-3);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: var(--text-base);
        background: var(--background);
        color: var(--text-primary);
        transition: border-color 0.2s ease;
    }

    .field-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
</style>