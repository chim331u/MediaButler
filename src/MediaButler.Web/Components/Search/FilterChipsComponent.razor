@using MediaButler.Web.Models

<div class="filter-chips-container">
    @if (SearchCriteria != null && SearchCriteria.HasActiveCriteria())
    {
        <div class="chips-header">
            <div class="chips-title">
                <Icon Name="filter" CssClass="small" />
                <span>Active Filters (@SearchCriteria.GetActiveFiltersCount())</span>
            </div>
            <button class="clear-all-btn" @onclick="ClearAllFilters" title="Clear all filters">
                <Icon Name="x" CssClass="small" />
                Clear All
            </button>
        </div>

        <div class="filter-chips">
            <!-- Quick Search Chip -->
            @if (!string.IsNullOrEmpty(SearchCriteria.QuickSearch))
            {
                <div class="filter-chip search-chip">
                    <Icon Name="search" CssClass="tiny chip-icon" />
                    <span class="chip-label">Search:</span>
                    <span class="chip-value">@SearchCriteria.QuickSearch</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.QuickSearch))" title="Remove search filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Category Chip -->
            @if (!string.IsNullOrEmpty(SearchCriteria.Category))
            {
                <div class="filter-chip category-chip">
                    <Icon Name="tag" CssClass="tiny chip-icon" />
                    <span class="chip-label">Category:</span>
                    <span class="chip-value">@SearchCriteria.Category</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.Category))" title="Remove category filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Status Chip -->
            @if (!string.IsNullOrEmpty(SearchCriteria.Status))
            {
                <div class="filter-chip status-chip">
                    <Icon Name="@GetStatusIcon(SearchCriteria.Status)" CssClass="tiny chip-icon" />
                    <span class="chip-label">Status:</span>
                    <span class="chip-value">@SearchCriteria.Status</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.Status))" title="Remove status filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- File Extension Chip -->
            @if (!string.IsNullOrEmpty(SearchCriteria.FileExtension))
            {
                <div class="filter-chip extension-chip">
                    <Icon Name="file" CssClass="tiny chip-icon" />
                    <span class="chip-label">Extension:</span>
                    <span class="chip-value">@SearchCriteria.FileExtension</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.FileExtension))" title="Remove extension filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Quality Chip -->
            @if (!string.IsNullOrEmpty(SearchCriteria.Quality))
            {
                <div class="filter-chip quality-chip">
                    <Icon Name="monitor" CssClass="tiny chip-icon" />
                    <span class="chip-label">Quality:</span>
                    <span class="chip-value">@SearchCriteria.Quality</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.Quality))" title="Remove quality filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- File Size Chip -->
            @if (SearchCriteria.MinSizeMB.HasValue || SearchCriteria.MaxSizeMB.HasValue)
            {
                <div class="filter-chip size-chip">
                    <Icon Name="hard-drive" CssClass="tiny chip-icon" />
                    <span class="chip-label">Size:</span>
                    <span class="chip-value">@GetSizeRangeDisplay()</span>
                    <button class="chip-remove" @onclick="() => ClearSizeFilter()" title="Remove size filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Date Range Chip -->
            @if (SearchCriteria.FromDate.HasValue || SearchCriteria.ToDate.HasValue)
            {
                <div class="filter-chip date-chip">
                    <Icon Name="calendar" CssClass="tiny chip-icon" />
                    <span class="chip-label">Date:</span>
                    <span class="chip-value">@GetDateRangeDisplay()</span>
                    <button class="chip-remove" @onclick="() => ClearDateFilter()" title="Remove date filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Confidence Chip -->
            @if (SearchCriteria.MinConfidence > 0)
            {
                <div class="filter-chip confidence-chip">
                    <Icon Name="zap" CssClass="tiny chip-icon" />
                    <span class="chip-label">Confidence:</span>
                    <span class="chip-value">â‰¥@SearchCriteria.MinConfidence%</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.MinConfidence))" title="Remove confidence filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Auto-classified Chip -->
            @if (SearchCriteria.OnlyAutoClassified)
            {
                <div class="filter-chip auto-chip">
                    <Icon Name="cpu" CssClass="tiny chip-icon" />
                    <span class="chip-value">Auto-classified only</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.OnlyAutoClassified))" title="Remove auto-classified filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Manual Review Chip -->
            @if (SearchCriteria.OnlyManuallyReviewed)
            {
                <div class="filter-chip manual-chip">
                    <Icon Name="user" CssClass="tiny chip-icon" />
                    <span class="chip-value">Manually reviewed only</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.OnlyManuallyReviewed))" title="Remove manual review filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Has Errors Chip -->
            @if (SearchCriteria.HasErrors)
            {
                <div class="filter-chip error-chip">
                    <Icon Name="alert-triangle" CssClass="tiny chip-icon" />
                    <span class="chip-value">Has errors</span>
                    <button class="chip-remove" @onclick="() => ClearFilter(nameof(SearchCriteria.HasErrors))" title="Remove error filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }

            <!-- Sort Chip (if not default) -->
            @if (SearchCriteria.SortBy != "CreatedDate" || SearchCriteria.SortDirection != "Desc")
            {
                <div class="filter-chip sort-chip">
                    <Icon Name="sort" CssClass="tiny chip-icon" />
                    <span class="chip-label">Sort:</span>
                    <span class="chip-value">@GetSortDisplay()</span>
                    <button class="chip-remove" @onclick="() => ClearSortFilter()" title="Remove sort filter">
                        <Icon Name="x" CssClass="tiny" />
                    </button>
                </div>
            }
        </div>

        <!-- Filter Summary -->
        <div class="filter-summary">
            <span class="summary-text">@SearchCriteria.GetDescription()</span>
        </div>
    }
    else if (ShowEmptyState)
    {
        <div class="empty-filters">
            <Icon Name="filter" CssClass="medium text-secondary" />
            <span class="empty-text">No filters applied. Use the search form above to filter results.</span>
        </div>
    }
</div>

@code {
    [Parameter] public SearchCriteriaModel? SearchCriteria { get; set; }
    [Parameter] public EventCallback<SearchCriteriaModel> OnFiltersChanged { get; set; }
    [Parameter] public bool ShowEmptyState { get; set; } = true;

    private async Task ClearAllFilters()
    {
        if (SearchCriteria != null)
        {
            var clearedCriteria = new SearchCriteriaModel
            {
                SortBy = SearchCriteria.SortBy,
                SortDirection = SearchCriteria.SortDirection,
                PageSize = SearchCriteria.PageSize,
                PageNumber = 1
            };
            
            await OnFiltersChanged.InvokeAsync(clearedCriteria);
        }
    }

    private async Task ClearFilter(string filterName)
    {
        if (SearchCriteria == null) return;

        var updatedCriteria = SearchCriteria with { };

        switch (filterName)
        {
            case nameof(SearchCriteria.QuickSearch):
                updatedCriteria = updatedCriteria with { QuickSearch = string.Empty };
                break;
            case nameof(SearchCriteria.Category):
                updatedCriteria = updatedCriteria with { Category = string.Empty };
                break;
            case nameof(SearchCriteria.Status):
                updatedCriteria = updatedCriteria with { Status = string.Empty };
                break;
            case nameof(SearchCriteria.FileExtension):
                updatedCriteria = updatedCriteria with { FileExtension = string.Empty };
                break;
            case nameof(SearchCriteria.Quality):
                updatedCriteria = updatedCriteria with { Quality = string.Empty };
                break;
            case nameof(SearchCriteria.MinConfidence):
                updatedCriteria = updatedCriteria with { MinConfidence = 0 };
                break;
            case nameof(SearchCriteria.OnlyAutoClassified):
                updatedCriteria = updatedCriteria with { OnlyAutoClassified = false };
                break;
            case nameof(SearchCriteria.OnlyManuallyReviewed):
                updatedCriteria = updatedCriteria with { OnlyManuallyReviewed = false };
                break;
            case nameof(SearchCriteria.HasErrors):
                updatedCriteria = updatedCriteria with { HasErrors = false };
                break;
        }

        await OnFiltersChanged.InvokeAsync(updatedCriteria);
    }

    private async Task ClearSizeFilter()
    {
        if (SearchCriteria == null) return;
        
        var updatedCriteria = SearchCriteria with 
        { 
            MinSizeMB = null, 
            MaxSizeMB = null 
        };
        
        await OnFiltersChanged.InvokeAsync(updatedCriteria);
    }

    private async Task ClearDateFilter()
    {
        if (SearchCriteria == null) return;
        
        var updatedCriteria = SearchCriteria with 
        { 
            FromDate = null, 
            ToDate = null 
        };
        
        await OnFiltersChanged.InvokeAsync(updatedCriteria);
    }

    private async Task ClearSortFilter()
    {
        if (SearchCriteria == null) return;
        
        var updatedCriteria = SearchCriteria with 
        { 
            SortBy = "CreatedDate",
            SortDirection = "Desc"
        };
        
        await OnFiltersChanged.InvokeAsync(updatedCriteria);
    }

    // Helper methods for display formatting
    private string GetStatusIcon(string status)
    {
        return status switch
        {
            "New" => "plus-circle",
            "Classified" => "cpu",
            "Confirmed" => "check-circle",
            "Moved" => "folder",
            "Error" => "x-circle",
            _ => "circle"
        };
    }

    private string GetSizeRangeDisplay()
    {
        if (SearchCriteria == null) return "";
        
        if (SearchCriteria.MinSizeMB.HasValue && SearchCriteria.MaxSizeMB.HasValue)
            return $"{SearchCriteria.MinSizeMB}-{SearchCriteria.MaxSizeMB} MB";
        if (SearchCriteria.MinSizeMB.HasValue)
            return $"â‰¥{SearchCriteria.MinSizeMB} MB";
        if (SearchCriteria.MaxSizeMB.HasValue)
            return $"â‰¤{SearchCriteria.MaxSizeMB} MB";
        
        return "";
    }

    private string GetDateRangeDisplay()
    {
        if (SearchCriteria == null) return "";
        
        if (SearchCriteria.FromDate.HasValue && SearchCriteria.ToDate.HasValue)
            return $"{SearchCriteria.FromDate:MMM dd} - {SearchCriteria.ToDate:MMM dd}";
        if (SearchCriteria.FromDate.HasValue)
            return $"â‰¥{SearchCriteria.FromDate:MMM dd, yyyy}";
        if (SearchCriteria.ToDate.HasValue)
            return $"â‰¤{SearchCriteria.ToDate:MMM dd, yyyy}";
        
        return "";
    }

    private string GetSortDisplay()
    {
        if (SearchCriteria == null) return "";
        
        var sortField = SearchCriteria.SortBy switch
        {
            "CreatedDate" => "Date Added",
            "Filename" => "Filename",
            "Category" => "Category",
            "SizeMB" => "File Size",
            "Confidence" => "ML Confidence",
            "LastUpdateDate" => "Last Modified",
            _ => SearchCriteria.SortBy
        };
        
        var direction = SearchCriteria.SortDirection == "Desc" ? "â†“" : "â†‘";
        return $"{sortField} {direction}";
    }
}

<style>
    .filter-chips-container {
        width: 100%;
        background: var(--background-elevated);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-lg);
        padding: var(--space-4);
        margin-bottom: var(--space-4);
    }

    .chips-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--space-3);
        padding-bottom: var(--space-2);
        border-bottom: 1px solid var(--border-color);
    }

    .chips-title {
        display: flex;
        align-items: center;
        gap: var(--space-2);
        font-size: var(--text-sm);
        font-weight: var(--font-semibold);
        color: var(--text-primary);
    }

    .clear-all-btn {
        display: flex;
        align-items: center;
        gap: var(--space-1);
        padding: var(--space-1) var(--space-2);
        background: var(--error-color);
        color: white;
        border: none;
        border-radius: var(--radius-sm);
        font-size: var(--text-xs);
        font-weight: var(--font-medium);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .clear-all-btn:hover {
        background: var(--error-600);
        transform: translateY(-1px);
    }

    .filter-chips {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-2);
        margin-bottom: var(--space-3);
    }

    .filter-chip {
        display: flex;
        align-items: center;
        gap: var(--space-1);
        padding: var(--space-1) var(--space-2);
        background: var(--background);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-full);
        font-size: var(--text-xs);
        color: var(--text-primary);
        transition: all 0.2s ease;
        max-width: 300px;
    }

    .filter-chip:hover {
        box-shadow: var(--shadow-sm);
        transform: translateY(-1px);
    }

    .chip-icon {
        color: var(--text-secondary);
        flex-shrink: 0;
    }

    .chip-label {
        font-weight: var(--font-medium);
        color: var(--text-secondary);
        white-space: nowrap;
    }

    .chip-value {
        font-weight: var(--font-semibold);
        color: var(--text-primary);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        max-width: 150px;
    }

    .chip-remove {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 16px;
        height: 16px;
        background: var(--background-subtle);
        border: none;
        border-radius: 50%;
        color: var(--text-secondary);
        cursor: pointer;
        transition: all 0.2s ease;
        flex-shrink: 0;
        margin-left: var(--space-1);
    }

    .chip-remove:hover {
        background: var(--error-color);
        color: white;
    }

    /* Chip Type Specific Styling */
    .search-chip {
        border-color: var(--primary-color);
        background: linear-gradient(135deg, var(--background), var(--primary-50));
    }

    .category-chip {
        border-color: var(--secondary-color);
        background: linear-gradient(135deg, var(--background), var(--secondary-50));
    }

    .status-chip {
        border-color: var(--success-color);
        background: linear-gradient(135deg, var(--background), var(--success-50));
    }

    .extension-chip {
        border-color: var(--info-color);
        background: linear-gradient(135deg, var(--background), var(--info-50));
    }

    .quality-chip {
        border-color: var(--tertiary-color);
        background: linear-gradient(135deg, var(--background), var(--tertiary-50));
    }

    .size-chip {
        border-color: var(--warning-color);
        background: linear-gradient(135deg, var(--background), var(--warning-50));
    }

    .date-chip {
        border-color: var(--primary-color);
        background: linear-gradient(135deg, var(--background), var(--primary-50));
    }

    .confidence-chip {
        border-color: var(--success-color);
        background: linear-gradient(135deg, var(--background), var(--success-50));
    }

    .auto-chip {
        border-color: var(--info-color);
        background: linear-gradient(135deg, var(--background), var(--info-50));
    }

    .manual-chip {
        border-color: var(--secondary-color);
        background: linear-gradient(135deg, var(--background), var(--secondary-50));
    }

    .error-chip {
        border-color: var(--error-color);
        background: linear-gradient(135deg, var(--background), var(--error-50));
    }

    .sort-chip {
        border-color: var(--text-secondary);
        background: linear-gradient(135deg, var(--background), var(--background-subtle));
    }

    /* Filter Summary */
    .filter-summary {
        padding: var(--space-2);
        background: var(--background-subtle);
        border-radius: var(--radius-md);
        border: 1px dashed var(--border-color);
    }

    .summary-text {
        font-size: var(--text-sm);
        color: var(--text-secondary);
        font-style: italic;
        line-height: 1.4;
    }

    /* Empty State */
    .empty-filters {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: var(--space-6);
        text-align: center;
        gap: var(--space-2);
    }

    .empty-text {
        font-size: var(--text-sm);
        color: var(--text-secondary);
    }

    /* Tablet Responsive (768px - 1024px) */
    @@media (min-width: 768px) and (max-width: 1024px) {
        .filter-chips-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .chips-grid {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--space-3);
        }

        .filter-chip {
            padding: var(--space-3);
        }

        .chip-label,
        .chip-value {
            font-size: var(--text-sm);
        }
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .chips-header {
            flex-direction: column;
            gap: var(--space-2);
            align-items: stretch;
        }

        .clear-all-btn {
            align-self: center;
        }

        .filter-chip {
            max-width: none;
        }

        .chip-value {
            max-width: 100px;
        }
    }

    @@media (max-width: 480px) {
        .filter-chips-container {
            padding: var(--space-3);
        }

        .filter-chip {
            font-size: 10px;
            padding: 2px var(--space-1);
        }

        .chip-value {
            max-width: 80px;
        }
    }
</style>