# MediaButler Blazor WebAssembly - ARM32 Compatible Build
# Special build process to avoid WebAssembly runtime pack issues on ARM32
# Target memory footprint: ~100MB

FROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build
WORKDIR /source

# Set memory-conscious environment variables for build
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1 \
    DOTNET_NOLOGO=1 \
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1 \
    DOTNET_GCServer=0 \
    DOTNET_gcConcurrent=false \
    DOTNET_GCHeapHardLimit=150000000

# Copy project files for dependency restoration
COPY src/MediaButler.Web/MediaButler.Web.csproj src/MediaButler.Web/
COPY src/MediaButler.Core/MediaButler.Core.csproj src/MediaButler.Core/

# Restore dependencies with minimal memory usage and skip WebAssembly workloads
RUN dotnet restore src/MediaButler.Web/MediaButler.Web.csproj \
    --no-cache \
    --disable-parallel \
    /p:RestoreNoCache=true \
    /p:MaxCpuCount=1 \
    /p:SkipWebAssemblyWorkload=true

# Copy source code
COPY src/ src/

# Build with ARM32 WebAssembly compatibility settings
RUN dotnet publish src/MediaButler.Web/MediaButler.Web.csproj \
    --configuration Release \
    --output /app \
    --self-contained false \
    --no-restore \
    --verbosity quiet \
    /p:InvariantGlobalization=true \
    /p:MaxCpuCount=1 \
    /p:BuildInParallel=false \
    /p:UseSharedCompilation=false \
    /p:RunAOTCompilation=false \
    /p:WasmEnableWebcil=false \
    /p:BlazorEnableTimeZoneSupport=false \
    /p:SkipWebAssemblyWorkload=true \
    /p:DisableWebAssemblyTrimming=true

# =============================================================================
# RUNTIME STAGE - Nginx for static file serving
# =============================================================================

FROM nginx:alpine
LABEL maintainer="MediaButler Team"
LABEL description="MediaButler Blazor WebAssembly - QNAP NAS Optimized"
LABEL version="1.0.0"

# Install minimal runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    && addgroup -g 1000 mediabutler \
    && adduser -D -s /bin/sh -u 1000 -G mediabutler mediabutler \
    && update-ca-certificates

# Copy published WebAssembly application to nginx html directory
COPY --from=build /app/wwwroot /usr/share/nginx/html

# Create custom nginx configuration for Blazor WebAssembly
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    root /usr/share/nginx/html; \
    index index.html; \
    \
    # Enable gzip compression \
    gzip on; \
    gzip_vary on; \
    gzip_min_length 1024; \
    gzip_types \
        text/plain \
        text/css \
        application/json \
        application/javascript \
        text/xml \
        application/xml \
        application/xml+rss \
        text/javascript \
        application/wasm; \
    \
    # Security headers \
    add_header X-Frame-Options "SAMEORIGIN" always; \
    add_header X-Content-Type-Options "nosniff" always; \
    add_header Referrer-Policy "no-referrer-when-downgrade" always; \
    \
    # Cache static assets \
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ { \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
    \
    # Special handling for WebAssembly files \
    location ~* \.wasm$ { \
        add_header Content-Type "application/wasm"; \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
    \
    # Handle client-side routing for SPA \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # Health check endpoint \
    location /health { \
        access_log off; \
        return 200 "healthy\\n"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Create required directories with proper permissions
RUN mkdir -p /var/log/nginx /var/cache/nginx \
    && chown -R mediabutler:mediabutler /var/log/nginx /var/cache/nginx /usr/share/nginx/html \
    && chmod -R 755 /var/log/nginx /var/cache/nginx /usr/share/nginx/html

# Switch to non-root user for nginx
USER mediabutler

# Expose HTTP port
EXPOSE 80

# Environment variables for ARM32 optimization
ENV TZ=UTC

# Health check for container orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Signal handling for graceful shutdown
STOPSIGNAL SIGTERM

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# Add metadata labels
LABEL org.opencontainers.image.title="MediaButler Blazor WebAssembly"
LABEL org.opencontainers.image.description="Intelligent TV series file organization Web UI (WebAssembly) optimized for QNAP NAS"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.vendor="MediaButler"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/chim331u/MediaButler"